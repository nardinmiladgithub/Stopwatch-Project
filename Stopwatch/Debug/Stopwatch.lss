
Stopwatch.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000241a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000008  00800060  0000241a  000024ae  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000e  00800068  00800068  000024b6  2**0
                  ALLOC
  3 .stab         00001494  00000000  00000000  000024b8  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000095e  00000000  00000000  0000394c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  000042aa  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  000043ea  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  0000455a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  000061a3  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  0000708e  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  00007e3c  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  00007f9c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  00008229  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  000089f7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 24 0f 	jmp	0x1e48	; 0x1e48 <__vector_1>
       8:	0c 94 73 0f 	jmp	0x1ee6	; 0x1ee6 <__vector_2>
       c:	0c 94 91 0f 	jmp	0x1f22	; 0x1f22 <__vector_3>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 bb 0f 	jmp	0x1f76	; 0x1f76 <__vector_7>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a8 e6       	ldi	r26, 0x68	; 104
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
      68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
      6a:	a6 37       	cpi	r26, 0x76	; 118
      6c:	b1 07       	cpc	r27, r17
      6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>

00000070 <__do_copy_data>:
      70:	10 e0       	ldi	r17, 0x00	; 0
      72:	a0 e6       	ldi	r26, 0x60	; 96
      74:	b0 e0       	ldi	r27, 0x00	; 0
      76:	ea e1       	ldi	r30, 0x1A	; 26
      78:	f4 e2       	ldi	r31, 0x24	; 36
      7a:	02 c0       	rjmp	.+4      	; 0x80 <.do_copy_data_start>

0000007c <.do_copy_data_loop>:
      7c:	05 90       	lpm	r0, Z+
      7e:	0d 92       	st	X+, r0

00000080 <.do_copy_data_start>:
      80:	a8 36       	cpi	r26, 0x68	; 104
      82:	b1 07       	cpc	r27, r17
      84:	d9 f7       	brne	.-10     	; 0x7c <.do_copy_data_loop>
      86:	0e 94 f6 10 	call	0x21ec	; 0x21ec <main>
      8a:	0c 94 0b 12 	jmp	0x2416	; 0x2416 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 d4 11 	jmp	0x23a8	; 0x23a8 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 f0 11 	jmp	0x23e0	; 0x23e0 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 e0 11 	jmp	0x23c0	; 0x23c0 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 fc 11 	jmp	0x23f8	; 0x23f8 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 e0 11 	jmp	0x23c0	; 0x23c0 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 fc 11 	jmp	0x23f8	; 0x23f8 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 d4 11 	jmp	0x23a8	; 0x23a8 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 f0 11 	jmp	0x23e0	; 0x23e0 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 e0 11 	jmp	0x23c0	; 0x23c0 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 fc 11 	jmp	0x23f8	; 0x23f8 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 e0 11 	jmp	0x23c0	; 0x23c0 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 fc 11 	jmp	0x23f8	; 0x23f8 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 e0 11 	jmp	0x23c0	; 0x23c0 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 fc 11 	jmp	0x23f8	; 0x23f8 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 e4 11 	jmp	0x23c8	; 0x23c8 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 00 12 	jmp	0x2400	; 0x2400 <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <IO_Ports_configuration>:
		} \
		else least--; \
}

void IO_Ports_configuration(void)
{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	00 d0       	rcall	.+0      	; 0xb4c <IO_Ports_configuration+0x6>
     b4c:	cd b7       	in	r28, 0x3d	; 61
     b4e:	de b7       	in	r29, 0x3e	; 62
	DDRA |= 0x3F;
     b50:	aa e3       	ldi	r26, 0x3A	; 58
     b52:	b0 e0       	ldi	r27, 0x00	; 0
     b54:	ea e3       	ldi	r30, 0x3A	; 58
     b56:	f0 e0       	ldi	r31, 0x00	; 0
     b58:	80 81       	ld	r24, Z
     b5a:	8f 63       	ori	r24, 0x3F	; 63
     b5c:	8c 93       	st	X, r24
	/* Configure the first 6-pins in PORTA as output pins for six 7-segment */
	DDRB &= 0x00;       /* Configure PORTB as input port */
     b5e:	e7 e3       	ldi	r30, 0x37	; 55
     b60:	f0 e0       	ldi	r31, 0x00	; 0
     b62:	80 81       	ld	r24, Z
     b64:	e7 e3       	ldi	r30, 0x37	; 55
     b66:	f0 e0       	ldi	r31, 0x00	; 0
     b68:	10 82       	st	Z, r1
	PORTB |= 0xFF;      /* Activate internal pull-up resistors */
     b6a:	e8 e3       	ldi	r30, 0x38	; 56
     b6c:	f0 e0       	ldi	r31, 0x00	; 0
     b6e:	80 81       	ld	r24, Z
     b70:	e8 e3       	ldi	r30, 0x38	; 56
     b72:	f0 e0       	ldi	r31, 0x00	; 0
     b74:	8f ef       	ldi	r24, 0xFF	; 255
     b76:	80 83       	st	Z, r24
	DDRC |= 0x0F;       /* Configure the first 4-pins in PORTC as output pins */
     b78:	a4 e3       	ldi	r26, 0x34	; 52
     b7a:	b0 e0       	ldi	r27, 0x00	; 0
     b7c:	e4 e3       	ldi	r30, 0x34	; 52
     b7e:	f0 e0       	ldi	r31, 0x00	; 0
     b80:	80 81       	ld	r24, Z
     b82:	8f 60       	ori	r24, 0x0F	; 15
     b84:	8c 93       	st	X, r24
	DDRD |=(1<<0);      /* Output pin for buzzer */
     b86:	a1 e3       	ldi	r26, 0x31	; 49
     b88:	b0 e0       	ldi	r27, 0x00	; 0
     b8a:	e1 e3       	ldi	r30, 0x31	; 49
     b8c:	f0 e0       	ldi	r31, 0x00	; 0
     b8e:	80 81       	ld	r24, Z
     b90:	81 60       	ori	r24, 0x01	; 1
     b92:	8c 93       	st	X, r24
	DDRD &=~(1<<2)&~(1<<3);           /* Configure input pins */
     b94:	a1 e3       	ldi	r26, 0x31	; 49
     b96:	b0 e0       	ldi	r27, 0x00	; 0
     b98:	e1 e3       	ldi	r30, 0x31	; 49
     b9a:	f0 e0       	ldi	r31, 0x00	; 0
     b9c:	80 81       	ld	r24, Z
     b9e:	83 7f       	andi	r24, 0xF3	; 243
     ba0:	8c 93       	st	X, r24
	DDRD |=(1<<4)|(1<<5);             /* Output pin for LEDs */
     ba2:	a1 e3       	ldi	r26, 0x31	; 49
     ba4:	b0 e0       	ldi	r27, 0x00	; 0
     ba6:	e1 e3       	ldi	r30, 0x31	; 49
     ba8:	f0 e0       	ldi	r31, 0x00	; 0
     baa:	80 81       	ld	r24, Z
     bac:	80 63       	ori	r24, 0x30	; 48
     bae:	8c 93       	st	X, r24
	PORTD |=(1<<2);                   /* Activate internal pull-up resistor */
     bb0:	a2 e3       	ldi	r26, 0x32	; 50
     bb2:	b0 e0       	ldi	r27, 0x00	; 0
     bb4:	e2 e3       	ldi	r30, 0x32	; 50
     bb6:	f0 e0       	ldi	r31, 0x00	; 0
     bb8:	80 81       	ld	r24, Z
     bba:	84 60       	ori	r24, 0x04	; 4
     bbc:	8c 93       	st	X, r24
	PORTD |=(1<<4);                   /* Turn on red LED initially */
     bbe:	a2 e3       	ldi	r26, 0x32	; 50
     bc0:	b0 e0       	ldi	r27, 0x00	; 0
     bc2:	e2 e3       	ldi	r30, 0x32	; 50
     bc4:	f0 e0       	ldi	r31, 0x00	; 0
     bc6:	80 81       	ld	r24, Z
     bc8:	80 61       	ori	r24, 0x10	; 16
     bca:	8c 93       	st	X, r24
	PORTD &=~(1<<0)&~(1<<5);          /* Turn buzzer and yellow LED off initially */
     bcc:	a2 e3       	ldi	r26, 0x32	; 50
     bce:	b0 e0       	ldi	r27, 0x00	; 0
     bd0:	e2 e3       	ldi	r30, 0x32	; 50
     bd2:	f0 e0       	ldi	r31, 0x00	; 0
     bd4:	80 81       	ld	r24, Z
     bd6:	8e 7d       	andi	r24, 0xDE	; 222
     bd8:	8c 93       	st	X, r24
	PORTC = (PORTC & 0xF0) | (0x00);  /* Initialize 7-segment by zeros */
     bda:	a5 e3       	ldi	r26, 0x35	; 53
     bdc:	b0 e0       	ldi	r27, 0x00	; 0
     bde:	e5 e3       	ldi	r30, 0x35	; 53
     be0:	f0 e0       	ldi	r31, 0x00	; 0
     be2:	80 81       	ld	r24, Z
     be4:	80 7f       	andi	r24, 0xF0	; 240
     be6:	8c 93       	st	X, r24
}
     be8:	0f 90       	pop	r0
     bea:	0f 90       	pop	r0
     bec:	cf 91       	pop	r28
     bee:	df 91       	pop	r29
     bf0:	08 95       	ret

00000bf2 <Timer1_configuration>:

void Timer1_configuration(void)
{
     bf2:	df 93       	push	r29
     bf4:	cf 93       	push	r28
     bf6:	cd b7       	in	r28, 0x3d	; 61
     bf8:	de b7       	in	r29, 0x3e	; 62
	TCCR1A = (1<<FOC1A);
     bfa:	ef e4       	ldi	r30, 0x4F	; 79
     bfc:	f0 e0       	ldi	r31, 0x00	; 0
     bfe:	88 e0       	ldi	r24, 0x08	; 8
     c00:	80 83       	st	Z, r24
	TCCR1B = (1<<WGM12)|(1<<CS12)|(1<<CS10);
     c02:	ee e4       	ldi	r30, 0x4E	; 78
     c04:	f0 e0       	ldi	r31, 0x00	; 0
     c06:	8d e0       	ldi	r24, 0x0D	; 13
     c08:	80 83       	st	Z, r24
	/*
	 * Enable FOC1A indicate that it is Non-PWM mode
	 * Enable WGM12 indicate CTC mode (mode number 4)
	 * Enable CS12, CS10 indicate that pre-scaler = 1024
	 */
	TCNT1 = 0;             /* Initial value register */
     c0a:	ec e4       	ldi	r30, 0x4C	; 76
     c0c:	f0 e0       	ldi	r31, 0x00	; 0
     c0e:	11 82       	std	Z+1, r1	; 0x01
     c10:	10 82       	st	Z, r1
	OCR1A = 15625;         /* Compare value register */
     c12:	ea e4       	ldi	r30, 0x4A	; 74
     c14:	f0 e0       	ldi	r31, 0x00	; 0
     c16:	89 e0       	ldi	r24, 0x09	; 9
     c18:	9d e3       	ldi	r25, 0x3D	; 61
     c1a:	91 83       	std	Z+1, r25	; 0x01
     c1c:	80 83       	st	Z, r24
	TIMSK |= (1<<OCIE1A);  /* Output Compare A Match Interrupt Enable */
     c1e:	a9 e5       	ldi	r26, 0x59	; 89
     c20:	b0 e0       	ldi	r27, 0x00	; 0
     c22:	e9 e5       	ldi	r30, 0x59	; 89
     c24:	f0 e0       	ldi	r31, 0x00	; 0
     c26:	80 81       	ld	r24, Z
     c28:	80 61       	ori	r24, 0x10	; 16
     c2a:	8c 93       	st	X, r24
	SREG |=(1<<7);
     c2c:	af e5       	ldi	r26, 0x5F	; 95
     c2e:	b0 e0       	ldi	r27, 0x00	; 0
     c30:	ef e5       	ldi	r30, 0x5F	; 95
     c32:	f0 e0       	ldi	r31, 0x00	; 0
     c34:	80 81       	ld	r24, Z
     c36:	80 68       	ori	r24, 0x80	; 128
     c38:	8c 93       	st	X, r24
}
     c3a:	cf 91       	pop	r28
     c3c:	df 91       	pop	r29
     c3e:	08 95       	ret

00000c40 <INT0_configuration>:

void INT0_configuration(void)
{
     c40:	df 93       	push	r29
     c42:	cf 93       	push	r28
     c44:	cd b7       	in	r28, 0x3d	; 61
     c46:	de b7       	in	r29, 0x3e	; 62
	GICR |=(1<<INT0);              /* Set module interrupt enable */
     c48:	ab e5       	ldi	r26, 0x5B	; 91
     c4a:	b0 e0       	ldi	r27, 0x00	; 0
     c4c:	eb e5       	ldi	r30, 0x5B	; 91
     c4e:	f0 e0       	ldi	r31, 0x00	; 0
     c50:	80 81       	ld	r24, Z
     c52:	80 64       	ori	r24, 0x40	; 64
     c54:	8c 93       	st	X, r24
	MCUCR |=(1<<ISC01);            /* Configure falling edge */
     c56:	a5 e5       	ldi	r26, 0x55	; 85
     c58:	b0 e0       	ldi	r27, 0x00	; 0
     c5a:	e5 e5       	ldi	r30, 0x55	; 85
     c5c:	f0 e0       	ldi	r31, 0x00	; 0
     c5e:	80 81       	ld	r24, Z
     c60:	82 60       	ori	r24, 0x02	; 2
     c62:	8c 93       	st	X, r24

}
     c64:	cf 91       	pop	r28
     c66:	df 91       	pop	r29
     c68:	08 95       	ret

00000c6a <INT1_configuration>:

void INT1_configuration(void)
{
     c6a:	df 93       	push	r29
     c6c:	cf 93       	push	r28
     c6e:	cd b7       	in	r28, 0x3d	; 61
     c70:	de b7       	in	r29, 0x3e	; 62
	MCUCR |=(1<<ISC11)|(1<<ISC10); /* Configure raising edge */
     c72:	a5 e5       	ldi	r26, 0x55	; 85
     c74:	b0 e0       	ldi	r27, 0x00	; 0
     c76:	e5 e5       	ldi	r30, 0x55	; 85
     c78:	f0 e0       	ldi	r31, 0x00	; 0
     c7a:	80 81       	ld	r24, Z
     c7c:	8c 60       	ori	r24, 0x0C	; 12
     c7e:	8c 93       	st	X, r24
	GICR |=(1<<INT1);              /* Set module interrupt enable */
     c80:	ab e5       	ldi	r26, 0x5B	; 91
     c82:	b0 e0       	ldi	r27, 0x00	; 0
     c84:	eb e5       	ldi	r30, 0x5B	; 91
     c86:	f0 e0       	ldi	r31, 0x00	; 0
     c88:	80 81       	ld	r24, Z
     c8a:	80 68       	ori	r24, 0x80	; 128
     c8c:	8c 93       	st	X, r24
}
     c8e:	cf 91       	pop	r28
     c90:	df 91       	pop	r29
     c92:	08 95       	ret

00000c94 <INT2_configurtion>:

void INT2_configurtion(void)
{
     c94:	df 93       	push	r29
     c96:	cf 93       	push	r28
     c98:	cd b7       	in	r28, 0x3d	; 61
     c9a:	de b7       	in	r29, 0x3e	; 62
	MCUCSR &=~(1<<ISC2);           /* Configure falling edge */
     c9c:	a4 e5       	ldi	r26, 0x54	; 84
     c9e:	b0 e0       	ldi	r27, 0x00	; 0
     ca0:	e4 e5       	ldi	r30, 0x54	; 84
     ca2:	f0 e0       	ldi	r31, 0x00	; 0
     ca4:	80 81       	ld	r24, Z
     ca6:	8f 7b       	andi	r24, 0xBF	; 191
     ca8:	8c 93       	st	X, r24
	GICR |=(1<<INT2);              /* Set module interrupt enable */
     caa:	ab e5       	ldi	r26, 0x5B	; 91
     cac:	b0 e0       	ldi	r27, 0x00	; 0
     cae:	eb e5       	ldi	r30, 0x5B	; 91
     cb0:	f0 e0       	ldi	r31, 0x00	; 0
     cb2:	80 81       	ld	r24, Z
     cb4:	80 62       	ori	r24, 0x20	; 32
     cb6:	8c 93       	st	X, r24
}
     cb8:	cf 91       	pop	r28
     cba:	df 91       	pop	r29
     cbc:	08 95       	ret

00000cbe <display>:

void display(unsigned char least_sec, unsigned char most_sec, unsigned char least_min, unsigned char most_min, unsigned char least_hour, unsigned char most_hour)
{
     cbe:	ef 92       	push	r14
     cc0:	0f 93       	push	r16
     cc2:	1f 93       	push	r17
     cc4:	df 93       	push	r29
     cc6:	cf 93       	push	r28
     cc8:	cd b7       	in	r28, 0x3d	; 61
     cca:	de b7       	in	r29, 0x3e	; 62
     ccc:	c8 56       	subi	r28, 0x68	; 104
     cce:	d0 40       	sbci	r29, 0x00	; 0
     cd0:	0f b6       	in	r0, 0x3f	; 63
     cd2:	f8 94       	cli
     cd4:	de bf       	out	0x3e, r29	; 62
     cd6:	0f be       	out	0x3f, r0	; 63
     cd8:	cd bf       	out	0x3d, r28	; 61
     cda:	fe 01       	movw	r30, r28
     cdc:	ed 59       	subi	r30, 0x9D	; 157
     cde:	ff 4f       	sbci	r31, 0xFF	; 255
     ce0:	80 83       	st	Z, r24
     ce2:	fe 01       	movw	r30, r28
     ce4:	ec 59       	subi	r30, 0x9C	; 156
     ce6:	ff 4f       	sbci	r31, 0xFF	; 255
     ce8:	60 83       	st	Z, r22
     cea:	fe 01       	movw	r30, r28
     cec:	eb 59       	subi	r30, 0x9B	; 155
     cee:	ff 4f       	sbci	r31, 0xFF	; 255
     cf0:	40 83       	st	Z, r20
     cf2:	fe 01       	movw	r30, r28
     cf4:	ea 59       	subi	r30, 0x9A	; 154
     cf6:	ff 4f       	sbci	r31, 0xFF	; 255
     cf8:	20 83       	st	Z, r18
     cfa:	fe 01       	movw	r30, r28
     cfc:	e9 59       	subi	r30, 0x99	; 153
     cfe:	ff 4f       	sbci	r31, 0xFF	; 255
     d00:	00 83       	st	Z, r16
     d02:	fe 01       	movw	r30, r28
     d04:	e8 59       	subi	r30, 0x98	; 152
     d06:	ff 4f       	sbci	r31, 0xFF	; 255
     d08:	e0 82       	st	Z, r14
     d0a:	fe 01       	movw	r30, r28
     d0c:	e1 5a       	subi	r30, 0xA1	; 161
     d0e:	ff 4f       	sbci	r31, 0xFF	; 255
     d10:	80 e0       	ldi	r24, 0x00	; 0
     d12:	90 e0       	ldi	r25, 0x00	; 0
     d14:	a0 e0       	ldi	r26, 0x00	; 0
     d16:	b0 e4       	ldi	r27, 0x40	; 64
     d18:	80 83       	st	Z, r24
     d1a:	91 83       	std	Z+1, r25	; 0x01
     d1c:	a2 83       	std	Z+2, r26	; 0x02
     d1e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     d20:	8e 01       	movw	r16, r28
     d22:	05 5a       	subi	r16, 0xA5	; 165
     d24:	1f 4f       	sbci	r17, 0xFF	; 255
     d26:	fe 01       	movw	r30, r28
     d28:	e1 5a       	subi	r30, 0xA1	; 161
     d2a:	ff 4f       	sbci	r31, 0xFF	; 255
     d2c:	60 81       	ld	r22, Z
     d2e:	71 81       	ldd	r23, Z+1	; 0x01
     d30:	82 81       	ldd	r24, Z+2	; 0x02
     d32:	93 81       	ldd	r25, Z+3	; 0x03
     d34:	20 e0       	ldi	r18, 0x00	; 0
     d36:	30 e0       	ldi	r19, 0x00	; 0
     d38:	4a e7       	ldi	r20, 0x7A	; 122
     d3a:	55 e4       	ldi	r21, 0x45	; 69
     d3c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     d40:	dc 01       	movw	r26, r24
     d42:	cb 01       	movw	r24, r22
     d44:	f8 01       	movw	r30, r16
     d46:	80 83       	st	Z, r24
     d48:	91 83       	std	Z+1, r25	; 0x01
     d4a:	a2 83       	std	Z+2, r26	; 0x02
     d4c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     d4e:	fe 01       	movw	r30, r28
     d50:	e5 5a       	subi	r30, 0xA5	; 165
     d52:	ff 4f       	sbci	r31, 0xFF	; 255
     d54:	60 81       	ld	r22, Z
     d56:	71 81       	ldd	r23, Z+1	; 0x01
     d58:	82 81       	ldd	r24, Z+2	; 0x02
     d5a:	93 81       	ldd	r25, Z+3	; 0x03
     d5c:	20 e0       	ldi	r18, 0x00	; 0
     d5e:	30 e0       	ldi	r19, 0x00	; 0
     d60:	40 e8       	ldi	r20, 0x80	; 128
     d62:	5f e3       	ldi	r21, 0x3F	; 63
     d64:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     d68:	88 23       	and	r24, r24
     d6a:	44 f4       	brge	.+16     	; 0xd7c <display+0xbe>
		__ticks = 1;
     d6c:	fe 01       	movw	r30, r28
     d6e:	e7 5a       	subi	r30, 0xA7	; 167
     d70:	ff 4f       	sbci	r31, 0xFF	; 255
     d72:	81 e0       	ldi	r24, 0x01	; 1
     d74:	90 e0       	ldi	r25, 0x00	; 0
     d76:	91 83       	std	Z+1, r25	; 0x01
     d78:	80 83       	st	Z, r24
     d7a:	64 c0       	rjmp	.+200    	; 0xe44 <display+0x186>
	else if (__tmp > 65535)
     d7c:	fe 01       	movw	r30, r28
     d7e:	e5 5a       	subi	r30, 0xA5	; 165
     d80:	ff 4f       	sbci	r31, 0xFF	; 255
     d82:	60 81       	ld	r22, Z
     d84:	71 81       	ldd	r23, Z+1	; 0x01
     d86:	82 81       	ldd	r24, Z+2	; 0x02
     d88:	93 81       	ldd	r25, Z+3	; 0x03
     d8a:	20 e0       	ldi	r18, 0x00	; 0
     d8c:	3f ef       	ldi	r19, 0xFF	; 255
     d8e:	4f e7       	ldi	r20, 0x7F	; 127
     d90:	57 e4       	ldi	r21, 0x47	; 71
     d92:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     d96:	18 16       	cp	r1, r24
     d98:	0c f0       	brlt	.+2      	; 0xd9c <display+0xde>
     d9a:	43 c0       	rjmp	.+134    	; 0xe22 <display+0x164>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     d9c:	fe 01       	movw	r30, r28
     d9e:	e1 5a       	subi	r30, 0xA1	; 161
     da0:	ff 4f       	sbci	r31, 0xFF	; 255
     da2:	60 81       	ld	r22, Z
     da4:	71 81       	ldd	r23, Z+1	; 0x01
     da6:	82 81       	ldd	r24, Z+2	; 0x02
     da8:	93 81       	ldd	r25, Z+3	; 0x03
     daa:	20 e0       	ldi	r18, 0x00	; 0
     dac:	30 e0       	ldi	r19, 0x00	; 0
     dae:	40 e2       	ldi	r20, 0x20	; 32
     db0:	51 e4       	ldi	r21, 0x41	; 65
     db2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     db6:	dc 01       	movw	r26, r24
     db8:	cb 01       	movw	r24, r22
     dba:	8e 01       	movw	r16, r28
     dbc:	07 5a       	subi	r16, 0xA7	; 167
     dbe:	1f 4f       	sbci	r17, 0xFF	; 255
     dc0:	bc 01       	movw	r22, r24
     dc2:	cd 01       	movw	r24, r26
     dc4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     dc8:	dc 01       	movw	r26, r24
     dca:	cb 01       	movw	r24, r22
     dcc:	f8 01       	movw	r30, r16
     dce:	91 83       	std	Z+1, r25	; 0x01
     dd0:	80 83       	st	Z, r24
     dd2:	1f c0       	rjmp	.+62     	; 0xe12 <display+0x154>
     dd4:	fe 01       	movw	r30, r28
     dd6:	e9 5a       	subi	r30, 0xA9	; 169
     dd8:	ff 4f       	sbci	r31, 0xFF	; 255
     dda:	80 e9       	ldi	r24, 0x90	; 144
     ddc:	91 e0       	ldi	r25, 0x01	; 1
     dde:	91 83       	std	Z+1, r25	; 0x01
     de0:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     de2:	fe 01       	movw	r30, r28
     de4:	e9 5a       	subi	r30, 0xA9	; 169
     de6:	ff 4f       	sbci	r31, 0xFF	; 255
     de8:	80 81       	ld	r24, Z
     dea:	91 81       	ldd	r25, Z+1	; 0x01
     dec:	01 97       	sbiw	r24, 0x01	; 1
     dee:	f1 f7       	brne	.-4      	; 0xdec <display+0x12e>
     df0:	fe 01       	movw	r30, r28
     df2:	e9 5a       	subi	r30, 0xA9	; 169
     df4:	ff 4f       	sbci	r31, 0xFF	; 255
     df6:	91 83       	std	Z+1, r25	; 0x01
     df8:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     dfa:	de 01       	movw	r26, r28
     dfc:	a7 5a       	subi	r26, 0xA7	; 167
     dfe:	bf 4f       	sbci	r27, 0xFF	; 255
     e00:	fe 01       	movw	r30, r28
     e02:	e7 5a       	subi	r30, 0xA7	; 167
     e04:	ff 4f       	sbci	r31, 0xFF	; 255
     e06:	80 81       	ld	r24, Z
     e08:	91 81       	ldd	r25, Z+1	; 0x01
     e0a:	01 97       	sbiw	r24, 0x01	; 1
     e0c:	11 96       	adiw	r26, 0x01	; 1
     e0e:	9c 93       	st	X, r25
     e10:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     e12:	fe 01       	movw	r30, r28
     e14:	e7 5a       	subi	r30, 0xA7	; 167
     e16:	ff 4f       	sbci	r31, 0xFF	; 255
     e18:	80 81       	ld	r24, Z
     e1a:	91 81       	ldd	r25, Z+1	; 0x01
     e1c:	00 97       	sbiw	r24, 0x00	; 0
     e1e:	d1 f6       	brne	.-76     	; 0xdd4 <display+0x116>
     e20:	27 c0       	rjmp	.+78     	; 0xe70 <display+0x1b2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     e22:	8e 01       	movw	r16, r28
     e24:	07 5a       	subi	r16, 0xA7	; 167
     e26:	1f 4f       	sbci	r17, 0xFF	; 255
     e28:	fe 01       	movw	r30, r28
     e2a:	e5 5a       	subi	r30, 0xA5	; 165
     e2c:	ff 4f       	sbci	r31, 0xFF	; 255
     e2e:	60 81       	ld	r22, Z
     e30:	71 81       	ldd	r23, Z+1	; 0x01
     e32:	82 81       	ldd	r24, Z+2	; 0x02
     e34:	93 81       	ldd	r25, Z+3	; 0x03
     e36:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     e3a:	dc 01       	movw	r26, r24
     e3c:	cb 01       	movw	r24, r22
     e3e:	f8 01       	movw	r30, r16
     e40:	91 83       	std	Z+1, r25	; 0x01
     e42:	80 83       	st	Z, r24
     e44:	de 01       	movw	r26, r28
     e46:	ab 5a       	subi	r26, 0xAB	; 171
     e48:	bf 4f       	sbci	r27, 0xFF	; 255
     e4a:	fe 01       	movw	r30, r28
     e4c:	e7 5a       	subi	r30, 0xA7	; 167
     e4e:	ff 4f       	sbci	r31, 0xFF	; 255
     e50:	80 81       	ld	r24, Z
     e52:	91 81       	ldd	r25, Z+1	; 0x01
     e54:	8d 93       	st	X+, r24
     e56:	9c 93       	st	X, r25
     e58:	fe 01       	movw	r30, r28
     e5a:	eb 5a       	subi	r30, 0xAB	; 171
     e5c:	ff 4f       	sbci	r31, 0xFF	; 255
     e5e:	80 81       	ld	r24, Z
     e60:	91 81       	ldd	r25, Z+1	; 0x01
     e62:	01 97       	sbiw	r24, 0x01	; 1
     e64:	f1 f7       	brne	.-4      	; 0xe62 <display+0x1a4>
     e66:	fe 01       	movw	r30, r28
     e68:	eb 5a       	subi	r30, 0xAB	; 171
     e6a:	ff 4f       	sbci	r31, 0xFF	; 255
     e6c:	91 83       	std	Z+1, r25	; 0x01
     e6e:	80 83       	st	Z, r24
	_delay_ms(2);
	// Display least significant digit of seconds
	PORTA = 0b00100000;
     e70:	eb e3       	ldi	r30, 0x3B	; 59
     e72:	f0 e0       	ldi	r31, 0x00	; 0
     e74:	80 e2       	ldi	r24, 0x20	; 32
     e76:	80 83       	st	Z, r24
	PORTC = (PORTC & 0xF0) | (least_sec & 0x0F);
     e78:	a5 e3       	ldi	r26, 0x35	; 53
     e7a:	b0 e0       	ldi	r27, 0x00	; 0
     e7c:	e5 e3       	ldi	r30, 0x35	; 53
     e7e:	f0 e0       	ldi	r31, 0x00	; 0
     e80:	80 81       	ld	r24, Z
     e82:	98 2f       	mov	r25, r24
     e84:	90 7f       	andi	r25, 0xF0	; 240
     e86:	fe 01       	movw	r30, r28
     e88:	ed 59       	subi	r30, 0x9D	; 157
     e8a:	ff 4f       	sbci	r31, 0xFF	; 255
     e8c:	80 81       	ld	r24, Z
     e8e:	8f 70       	andi	r24, 0x0F	; 15
     e90:	89 2b       	or	r24, r25
     e92:	8c 93       	st	X, r24
     e94:	fe 01       	movw	r30, r28
     e96:	ef 5a       	subi	r30, 0xAF	; 175
     e98:	ff 4f       	sbci	r31, 0xFF	; 255
     e9a:	80 e0       	ldi	r24, 0x00	; 0
     e9c:	90 e0       	ldi	r25, 0x00	; 0
     e9e:	a0 e0       	ldi	r26, 0x00	; 0
     ea0:	b0 e4       	ldi	r27, 0x40	; 64
     ea2:	80 83       	st	Z, r24
     ea4:	91 83       	std	Z+1, r25	; 0x01
     ea6:	a2 83       	std	Z+2, r26	; 0x02
     ea8:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     eaa:	8e 01       	movw	r16, r28
     eac:	03 5b       	subi	r16, 0xB3	; 179
     eae:	1f 4f       	sbci	r17, 0xFF	; 255
     eb0:	fe 01       	movw	r30, r28
     eb2:	ef 5a       	subi	r30, 0xAF	; 175
     eb4:	ff 4f       	sbci	r31, 0xFF	; 255
     eb6:	60 81       	ld	r22, Z
     eb8:	71 81       	ldd	r23, Z+1	; 0x01
     eba:	82 81       	ldd	r24, Z+2	; 0x02
     ebc:	93 81       	ldd	r25, Z+3	; 0x03
     ebe:	20 e0       	ldi	r18, 0x00	; 0
     ec0:	30 e0       	ldi	r19, 0x00	; 0
     ec2:	4a e7       	ldi	r20, 0x7A	; 122
     ec4:	55 e4       	ldi	r21, 0x45	; 69
     ec6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     eca:	dc 01       	movw	r26, r24
     ecc:	cb 01       	movw	r24, r22
     ece:	f8 01       	movw	r30, r16
     ed0:	80 83       	st	Z, r24
     ed2:	91 83       	std	Z+1, r25	; 0x01
     ed4:	a2 83       	std	Z+2, r26	; 0x02
     ed6:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     ed8:	fe 01       	movw	r30, r28
     eda:	e3 5b       	subi	r30, 0xB3	; 179
     edc:	ff 4f       	sbci	r31, 0xFF	; 255
     ede:	60 81       	ld	r22, Z
     ee0:	71 81       	ldd	r23, Z+1	; 0x01
     ee2:	82 81       	ldd	r24, Z+2	; 0x02
     ee4:	93 81       	ldd	r25, Z+3	; 0x03
     ee6:	20 e0       	ldi	r18, 0x00	; 0
     ee8:	30 e0       	ldi	r19, 0x00	; 0
     eea:	40 e8       	ldi	r20, 0x80	; 128
     eec:	5f e3       	ldi	r21, 0x3F	; 63
     eee:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     ef2:	88 23       	and	r24, r24
     ef4:	44 f4       	brge	.+16     	; 0xf06 <display+0x248>
		__ticks = 1;
     ef6:	fe 01       	movw	r30, r28
     ef8:	e5 5b       	subi	r30, 0xB5	; 181
     efa:	ff 4f       	sbci	r31, 0xFF	; 255
     efc:	81 e0       	ldi	r24, 0x01	; 1
     efe:	90 e0       	ldi	r25, 0x00	; 0
     f00:	91 83       	std	Z+1, r25	; 0x01
     f02:	80 83       	st	Z, r24
     f04:	64 c0       	rjmp	.+200    	; 0xfce <display+0x310>
	else if (__tmp > 65535)
     f06:	fe 01       	movw	r30, r28
     f08:	e3 5b       	subi	r30, 0xB3	; 179
     f0a:	ff 4f       	sbci	r31, 0xFF	; 255
     f0c:	60 81       	ld	r22, Z
     f0e:	71 81       	ldd	r23, Z+1	; 0x01
     f10:	82 81       	ldd	r24, Z+2	; 0x02
     f12:	93 81       	ldd	r25, Z+3	; 0x03
     f14:	20 e0       	ldi	r18, 0x00	; 0
     f16:	3f ef       	ldi	r19, 0xFF	; 255
     f18:	4f e7       	ldi	r20, 0x7F	; 127
     f1a:	57 e4       	ldi	r21, 0x47	; 71
     f1c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     f20:	18 16       	cp	r1, r24
     f22:	0c f0       	brlt	.+2      	; 0xf26 <display+0x268>
     f24:	43 c0       	rjmp	.+134    	; 0xfac <display+0x2ee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     f26:	fe 01       	movw	r30, r28
     f28:	ef 5a       	subi	r30, 0xAF	; 175
     f2a:	ff 4f       	sbci	r31, 0xFF	; 255
     f2c:	60 81       	ld	r22, Z
     f2e:	71 81       	ldd	r23, Z+1	; 0x01
     f30:	82 81       	ldd	r24, Z+2	; 0x02
     f32:	93 81       	ldd	r25, Z+3	; 0x03
     f34:	20 e0       	ldi	r18, 0x00	; 0
     f36:	30 e0       	ldi	r19, 0x00	; 0
     f38:	40 e2       	ldi	r20, 0x20	; 32
     f3a:	51 e4       	ldi	r21, 0x41	; 65
     f3c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     f40:	dc 01       	movw	r26, r24
     f42:	cb 01       	movw	r24, r22
     f44:	8e 01       	movw	r16, r28
     f46:	05 5b       	subi	r16, 0xB5	; 181
     f48:	1f 4f       	sbci	r17, 0xFF	; 255
     f4a:	bc 01       	movw	r22, r24
     f4c:	cd 01       	movw	r24, r26
     f4e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     f52:	dc 01       	movw	r26, r24
     f54:	cb 01       	movw	r24, r22
     f56:	f8 01       	movw	r30, r16
     f58:	91 83       	std	Z+1, r25	; 0x01
     f5a:	80 83       	st	Z, r24
     f5c:	1f c0       	rjmp	.+62     	; 0xf9c <display+0x2de>
     f5e:	fe 01       	movw	r30, r28
     f60:	e7 5b       	subi	r30, 0xB7	; 183
     f62:	ff 4f       	sbci	r31, 0xFF	; 255
     f64:	80 e9       	ldi	r24, 0x90	; 144
     f66:	91 e0       	ldi	r25, 0x01	; 1
     f68:	91 83       	std	Z+1, r25	; 0x01
     f6a:	80 83       	st	Z, r24
     f6c:	fe 01       	movw	r30, r28
     f6e:	e7 5b       	subi	r30, 0xB7	; 183
     f70:	ff 4f       	sbci	r31, 0xFF	; 255
     f72:	80 81       	ld	r24, Z
     f74:	91 81       	ldd	r25, Z+1	; 0x01
     f76:	01 97       	sbiw	r24, 0x01	; 1
     f78:	f1 f7       	brne	.-4      	; 0xf76 <display+0x2b8>
     f7a:	fe 01       	movw	r30, r28
     f7c:	e7 5b       	subi	r30, 0xB7	; 183
     f7e:	ff 4f       	sbci	r31, 0xFF	; 255
     f80:	91 83       	std	Z+1, r25	; 0x01
     f82:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     f84:	de 01       	movw	r26, r28
     f86:	a5 5b       	subi	r26, 0xB5	; 181
     f88:	bf 4f       	sbci	r27, 0xFF	; 255
     f8a:	fe 01       	movw	r30, r28
     f8c:	e5 5b       	subi	r30, 0xB5	; 181
     f8e:	ff 4f       	sbci	r31, 0xFF	; 255
     f90:	80 81       	ld	r24, Z
     f92:	91 81       	ldd	r25, Z+1	; 0x01
     f94:	01 97       	sbiw	r24, 0x01	; 1
     f96:	11 96       	adiw	r26, 0x01	; 1
     f98:	9c 93       	st	X, r25
     f9a:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     f9c:	fe 01       	movw	r30, r28
     f9e:	e5 5b       	subi	r30, 0xB5	; 181
     fa0:	ff 4f       	sbci	r31, 0xFF	; 255
     fa2:	80 81       	ld	r24, Z
     fa4:	91 81       	ldd	r25, Z+1	; 0x01
     fa6:	00 97       	sbiw	r24, 0x00	; 0
     fa8:	d1 f6       	brne	.-76     	; 0xf5e <display+0x2a0>
     faa:	27 c0       	rjmp	.+78     	; 0xffa <display+0x33c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     fac:	8e 01       	movw	r16, r28
     fae:	05 5b       	subi	r16, 0xB5	; 181
     fb0:	1f 4f       	sbci	r17, 0xFF	; 255
     fb2:	fe 01       	movw	r30, r28
     fb4:	e3 5b       	subi	r30, 0xB3	; 179
     fb6:	ff 4f       	sbci	r31, 0xFF	; 255
     fb8:	60 81       	ld	r22, Z
     fba:	71 81       	ldd	r23, Z+1	; 0x01
     fbc:	82 81       	ldd	r24, Z+2	; 0x02
     fbe:	93 81       	ldd	r25, Z+3	; 0x03
     fc0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     fc4:	dc 01       	movw	r26, r24
     fc6:	cb 01       	movw	r24, r22
     fc8:	f8 01       	movw	r30, r16
     fca:	91 83       	std	Z+1, r25	; 0x01
     fcc:	80 83       	st	Z, r24
     fce:	de 01       	movw	r26, r28
     fd0:	a9 5b       	subi	r26, 0xB9	; 185
     fd2:	bf 4f       	sbci	r27, 0xFF	; 255
     fd4:	fe 01       	movw	r30, r28
     fd6:	e5 5b       	subi	r30, 0xB5	; 181
     fd8:	ff 4f       	sbci	r31, 0xFF	; 255
     fda:	80 81       	ld	r24, Z
     fdc:	91 81       	ldd	r25, Z+1	; 0x01
     fde:	8d 93       	st	X+, r24
     fe0:	9c 93       	st	X, r25
     fe2:	fe 01       	movw	r30, r28
     fe4:	e9 5b       	subi	r30, 0xB9	; 185
     fe6:	ff 4f       	sbci	r31, 0xFF	; 255
     fe8:	80 81       	ld	r24, Z
     fea:	91 81       	ldd	r25, Z+1	; 0x01
     fec:	01 97       	sbiw	r24, 0x01	; 1
     fee:	f1 f7       	brne	.-4      	; 0xfec <display+0x32e>
     ff0:	fe 01       	movw	r30, r28
     ff2:	e9 5b       	subi	r30, 0xB9	; 185
     ff4:	ff 4f       	sbci	r31, 0xFF	; 255
     ff6:	91 83       	std	Z+1, r25	; 0x01
     ff8:	80 83       	st	Z, r24
	_delay_ms(2);

	// Display most significant digit of seconds
	PORTA = 0b00010000;
     ffa:	eb e3       	ldi	r30, 0x3B	; 59
     ffc:	f0 e0       	ldi	r31, 0x00	; 0
     ffe:	80 e1       	ldi	r24, 0x10	; 16
    1000:	80 83       	st	Z, r24
	PORTC = (PORTC & 0xF0) | (most_sec & 0x0F);
    1002:	a5 e3       	ldi	r26, 0x35	; 53
    1004:	b0 e0       	ldi	r27, 0x00	; 0
    1006:	e5 e3       	ldi	r30, 0x35	; 53
    1008:	f0 e0       	ldi	r31, 0x00	; 0
    100a:	80 81       	ld	r24, Z
    100c:	98 2f       	mov	r25, r24
    100e:	90 7f       	andi	r25, 0xF0	; 240
    1010:	fe 01       	movw	r30, r28
    1012:	ec 59       	subi	r30, 0x9C	; 156
    1014:	ff 4f       	sbci	r31, 0xFF	; 255
    1016:	80 81       	ld	r24, Z
    1018:	8f 70       	andi	r24, 0x0F	; 15
    101a:	89 2b       	or	r24, r25
    101c:	8c 93       	st	X, r24
    101e:	fe 01       	movw	r30, r28
    1020:	ed 5b       	subi	r30, 0xBD	; 189
    1022:	ff 4f       	sbci	r31, 0xFF	; 255
    1024:	80 e0       	ldi	r24, 0x00	; 0
    1026:	90 e0       	ldi	r25, 0x00	; 0
    1028:	a0 e0       	ldi	r26, 0x00	; 0
    102a:	b0 e4       	ldi	r27, 0x40	; 64
    102c:	80 83       	st	Z, r24
    102e:	91 83       	std	Z+1, r25	; 0x01
    1030:	a2 83       	std	Z+2, r26	; 0x02
    1032:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1034:	8e 01       	movw	r16, r28
    1036:	01 5c       	subi	r16, 0xC1	; 193
    1038:	1f 4f       	sbci	r17, 0xFF	; 255
    103a:	fe 01       	movw	r30, r28
    103c:	ed 5b       	subi	r30, 0xBD	; 189
    103e:	ff 4f       	sbci	r31, 0xFF	; 255
    1040:	60 81       	ld	r22, Z
    1042:	71 81       	ldd	r23, Z+1	; 0x01
    1044:	82 81       	ldd	r24, Z+2	; 0x02
    1046:	93 81       	ldd	r25, Z+3	; 0x03
    1048:	20 e0       	ldi	r18, 0x00	; 0
    104a:	30 e0       	ldi	r19, 0x00	; 0
    104c:	4a e7       	ldi	r20, 0x7A	; 122
    104e:	55 e4       	ldi	r21, 0x45	; 69
    1050:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1054:	dc 01       	movw	r26, r24
    1056:	cb 01       	movw	r24, r22
    1058:	f8 01       	movw	r30, r16
    105a:	80 83       	st	Z, r24
    105c:	91 83       	std	Z+1, r25	; 0x01
    105e:	a2 83       	std	Z+2, r26	; 0x02
    1060:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1062:	fe 01       	movw	r30, r28
    1064:	ff 96       	adiw	r30, 0x3f	; 63
    1066:	60 81       	ld	r22, Z
    1068:	71 81       	ldd	r23, Z+1	; 0x01
    106a:	82 81       	ldd	r24, Z+2	; 0x02
    106c:	93 81       	ldd	r25, Z+3	; 0x03
    106e:	20 e0       	ldi	r18, 0x00	; 0
    1070:	30 e0       	ldi	r19, 0x00	; 0
    1072:	40 e8       	ldi	r20, 0x80	; 128
    1074:	5f e3       	ldi	r21, 0x3F	; 63
    1076:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    107a:	88 23       	and	r24, r24
    107c:	2c f4       	brge	.+10     	; 0x1088 <display+0x3ca>
		__ticks = 1;
    107e:	81 e0       	ldi	r24, 0x01	; 1
    1080:	90 e0       	ldi	r25, 0x00	; 0
    1082:	9e af       	std	Y+62, r25	; 0x3e
    1084:	8d af       	std	Y+61, r24	; 0x3d
    1086:	46 c0       	rjmp	.+140    	; 0x1114 <display+0x456>
	else if (__tmp > 65535)
    1088:	fe 01       	movw	r30, r28
    108a:	ff 96       	adiw	r30, 0x3f	; 63
    108c:	60 81       	ld	r22, Z
    108e:	71 81       	ldd	r23, Z+1	; 0x01
    1090:	82 81       	ldd	r24, Z+2	; 0x02
    1092:	93 81       	ldd	r25, Z+3	; 0x03
    1094:	20 e0       	ldi	r18, 0x00	; 0
    1096:	3f ef       	ldi	r19, 0xFF	; 255
    1098:	4f e7       	ldi	r20, 0x7F	; 127
    109a:	57 e4       	ldi	r21, 0x47	; 71
    109c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    10a0:	18 16       	cp	r1, r24
    10a2:	64 f5       	brge	.+88     	; 0x10fc <display+0x43e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    10a4:	fe 01       	movw	r30, r28
    10a6:	ed 5b       	subi	r30, 0xBD	; 189
    10a8:	ff 4f       	sbci	r31, 0xFF	; 255
    10aa:	60 81       	ld	r22, Z
    10ac:	71 81       	ldd	r23, Z+1	; 0x01
    10ae:	82 81       	ldd	r24, Z+2	; 0x02
    10b0:	93 81       	ldd	r25, Z+3	; 0x03
    10b2:	20 e0       	ldi	r18, 0x00	; 0
    10b4:	30 e0       	ldi	r19, 0x00	; 0
    10b6:	40 e2       	ldi	r20, 0x20	; 32
    10b8:	51 e4       	ldi	r21, 0x41	; 65
    10ba:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    10be:	dc 01       	movw	r26, r24
    10c0:	cb 01       	movw	r24, r22
    10c2:	bc 01       	movw	r22, r24
    10c4:	cd 01       	movw	r24, r26
    10c6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    10ca:	dc 01       	movw	r26, r24
    10cc:	cb 01       	movw	r24, r22
    10ce:	9e af       	std	Y+62, r25	; 0x3e
    10d0:	8d af       	std	Y+61, r24	; 0x3d
    10d2:	0f c0       	rjmp	.+30     	; 0x10f2 <display+0x434>
    10d4:	80 e9       	ldi	r24, 0x90	; 144
    10d6:	91 e0       	ldi	r25, 0x01	; 1
    10d8:	9c af       	std	Y+60, r25	; 0x3c
    10da:	8b af       	std	Y+59, r24	; 0x3b
    10dc:	8b ad       	ldd	r24, Y+59	; 0x3b
    10de:	9c ad       	ldd	r25, Y+60	; 0x3c
    10e0:	01 97       	sbiw	r24, 0x01	; 1
    10e2:	f1 f7       	brne	.-4      	; 0x10e0 <display+0x422>
    10e4:	9c af       	std	Y+60, r25	; 0x3c
    10e6:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    10e8:	8d ad       	ldd	r24, Y+61	; 0x3d
    10ea:	9e ad       	ldd	r25, Y+62	; 0x3e
    10ec:	01 97       	sbiw	r24, 0x01	; 1
    10ee:	9e af       	std	Y+62, r25	; 0x3e
    10f0:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    10f2:	8d ad       	ldd	r24, Y+61	; 0x3d
    10f4:	9e ad       	ldd	r25, Y+62	; 0x3e
    10f6:	00 97       	sbiw	r24, 0x00	; 0
    10f8:	69 f7       	brne	.-38     	; 0x10d4 <display+0x416>
    10fa:	16 c0       	rjmp	.+44     	; 0x1128 <display+0x46a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    10fc:	fe 01       	movw	r30, r28
    10fe:	ff 96       	adiw	r30, 0x3f	; 63
    1100:	60 81       	ld	r22, Z
    1102:	71 81       	ldd	r23, Z+1	; 0x01
    1104:	82 81       	ldd	r24, Z+2	; 0x02
    1106:	93 81       	ldd	r25, Z+3	; 0x03
    1108:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    110c:	dc 01       	movw	r26, r24
    110e:	cb 01       	movw	r24, r22
    1110:	9e af       	std	Y+62, r25	; 0x3e
    1112:	8d af       	std	Y+61, r24	; 0x3d
    1114:	8d ad       	ldd	r24, Y+61	; 0x3d
    1116:	9e ad       	ldd	r25, Y+62	; 0x3e
    1118:	9a af       	std	Y+58, r25	; 0x3a
    111a:	89 af       	std	Y+57, r24	; 0x39
    111c:	89 ad       	ldd	r24, Y+57	; 0x39
    111e:	9a ad       	ldd	r25, Y+58	; 0x3a
    1120:	01 97       	sbiw	r24, 0x01	; 1
    1122:	f1 f7       	brne	.-4      	; 0x1120 <display+0x462>
    1124:	9a af       	std	Y+58, r25	; 0x3a
    1126:	89 af       	std	Y+57, r24	; 0x39
	_delay_ms(2);

	// Display least significant digit of minutes
	PORTA = 0b00001000;
    1128:	eb e3       	ldi	r30, 0x3B	; 59
    112a:	f0 e0       	ldi	r31, 0x00	; 0
    112c:	88 e0       	ldi	r24, 0x08	; 8
    112e:	80 83       	st	Z, r24
	PORTC = (PORTC & 0xF0) | (least_min & 0x0F);
    1130:	a5 e3       	ldi	r26, 0x35	; 53
    1132:	b0 e0       	ldi	r27, 0x00	; 0
    1134:	e5 e3       	ldi	r30, 0x35	; 53
    1136:	f0 e0       	ldi	r31, 0x00	; 0
    1138:	80 81       	ld	r24, Z
    113a:	98 2f       	mov	r25, r24
    113c:	90 7f       	andi	r25, 0xF0	; 240
    113e:	fe 01       	movw	r30, r28
    1140:	eb 59       	subi	r30, 0x9B	; 155
    1142:	ff 4f       	sbci	r31, 0xFF	; 255
    1144:	80 81       	ld	r24, Z
    1146:	8f 70       	andi	r24, 0x0F	; 15
    1148:	89 2b       	or	r24, r25
    114a:	8c 93       	st	X, r24
    114c:	80 e0       	ldi	r24, 0x00	; 0
    114e:	90 e0       	ldi	r25, 0x00	; 0
    1150:	a0 e0       	ldi	r26, 0x00	; 0
    1152:	b0 e4       	ldi	r27, 0x40	; 64
    1154:	8d ab       	std	Y+53, r24	; 0x35
    1156:	9e ab       	std	Y+54, r25	; 0x36
    1158:	af ab       	std	Y+55, r26	; 0x37
    115a:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    115c:	6d a9       	ldd	r22, Y+53	; 0x35
    115e:	7e a9       	ldd	r23, Y+54	; 0x36
    1160:	8f a9       	ldd	r24, Y+55	; 0x37
    1162:	98 ad       	ldd	r25, Y+56	; 0x38
    1164:	20 e0       	ldi	r18, 0x00	; 0
    1166:	30 e0       	ldi	r19, 0x00	; 0
    1168:	4a e7       	ldi	r20, 0x7A	; 122
    116a:	55 e4       	ldi	r21, 0x45	; 69
    116c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1170:	dc 01       	movw	r26, r24
    1172:	cb 01       	movw	r24, r22
    1174:	89 ab       	std	Y+49, r24	; 0x31
    1176:	9a ab       	std	Y+50, r25	; 0x32
    1178:	ab ab       	std	Y+51, r26	; 0x33
    117a:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    117c:	69 a9       	ldd	r22, Y+49	; 0x31
    117e:	7a a9       	ldd	r23, Y+50	; 0x32
    1180:	8b a9       	ldd	r24, Y+51	; 0x33
    1182:	9c a9       	ldd	r25, Y+52	; 0x34
    1184:	20 e0       	ldi	r18, 0x00	; 0
    1186:	30 e0       	ldi	r19, 0x00	; 0
    1188:	40 e8       	ldi	r20, 0x80	; 128
    118a:	5f e3       	ldi	r21, 0x3F	; 63
    118c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1190:	88 23       	and	r24, r24
    1192:	2c f4       	brge	.+10     	; 0x119e <display+0x4e0>
		__ticks = 1;
    1194:	81 e0       	ldi	r24, 0x01	; 1
    1196:	90 e0       	ldi	r25, 0x00	; 0
    1198:	98 ab       	std	Y+48, r25	; 0x30
    119a:	8f a7       	std	Y+47, r24	; 0x2f
    119c:	3f c0       	rjmp	.+126    	; 0x121c <display+0x55e>
	else if (__tmp > 65535)
    119e:	69 a9       	ldd	r22, Y+49	; 0x31
    11a0:	7a a9       	ldd	r23, Y+50	; 0x32
    11a2:	8b a9       	ldd	r24, Y+51	; 0x33
    11a4:	9c a9       	ldd	r25, Y+52	; 0x34
    11a6:	20 e0       	ldi	r18, 0x00	; 0
    11a8:	3f ef       	ldi	r19, 0xFF	; 255
    11aa:	4f e7       	ldi	r20, 0x7F	; 127
    11ac:	57 e4       	ldi	r21, 0x47	; 71
    11ae:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    11b2:	18 16       	cp	r1, r24
    11b4:	4c f5       	brge	.+82     	; 0x1208 <display+0x54a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    11b6:	6d a9       	ldd	r22, Y+53	; 0x35
    11b8:	7e a9       	ldd	r23, Y+54	; 0x36
    11ba:	8f a9       	ldd	r24, Y+55	; 0x37
    11bc:	98 ad       	ldd	r25, Y+56	; 0x38
    11be:	20 e0       	ldi	r18, 0x00	; 0
    11c0:	30 e0       	ldi	r19, 0x00	; 0
    11c2:	40 e2       	ldi	r20, 0x20	; 32
    11c4:	51 e4       	ldi	r21, 0x41	; 65
    11c6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    11ca:	dc 01       	movw	r26, r24
    11cc:	cb 01       	movw	r24, r22
    11ce:	bc 01       	movw	r22, r24
    11d0:	cd 01       	movw	r24, r26
    11d2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    11d6:	dc 01       	movw	r26, r24
    11d8:	cb 01       	movw	r24, r22
    11da:	98 ab       	std	Y+48, r25	; 0x30
    11dc:	8f a7       	std	Y+47, r24	; 0x2f
    11de:	0f c0       	rjmp	.+30     	; 0x11fe <display+0x540>
    11e0:	80 e9       	ldi	r24, 0x90	; 144
    11e2:	91 e0       	ldi	r25, 0x01	; 1
    11e4:	9e a7       	std	Y+46, r25	; 0x2e
    11e6:	8d a7       	std	Y+45, r24	; 0x2d
    11e8:	8d a5       	ldd	r24, Y+45	; 0x2d
    11ea:	9e a5       	ldd	r25, Y+46	; 0x2e
    11ec:	01 97       	sbiw	r24, 0x01	; 1
    11ee:	f1 f7       	brne	.-4      	; 0x11ec <display+0x52e>
    11f0:	9e a7       	std	Y+46, r25	; 0x2e
    11f2:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    11f4:	8f a5       	ldd	r24, Y+47	; 0x2f
    11f6:	98 a9       	ldd	r25, Y+48	; 0x30
    11f8:	01 97       	sbiw	r24, 0x01	; 1
    11fa:	98 ab       	std	Y+48, r25	; 0x30
    11fc:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    11fe:	8f a5       	ldd	r24, Y+47	; 0x2f
    1200:	98 a9       	ldd	r25, Y+48	; 0x30
    1202:	00 97       	sbiw	r24, 0x00	; 0
    1204:	69 f7       	brne	.-38     	; 0x11e0 <display+0x522>
    1206:	14 c0       	rjmp	.+40     	; 0x1230 <display+0x572>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1208:	69 a9       	ldd	r22, Y+49	; 0x31
    120a:	7a a9       	ldd	r23, Y+50	; 0x32
    120c:	8b a9       	ldd	r24, Y+51	; 0x33
    120e:	9c a9       	ldd	r25, Y+52	; 0x34
    1210:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1214:	dc 01       	movw	r26, r24
    1216:	cb 01       	movw	r24, r22
    1218:	98 ab       	std	Y+48, r25	; 0x30
    121a:	8f a7       	std	Y+47, r24	; 0x2f
    121c:	8f a5       	ldd	r24, Y+47	; 0x2f
    121e:	98 a9       	ldd	r25, Y+48	; 0x30
    1220:	9c a7       	std	Y+44, r25	; 0x2c
    1222:	8b a7       	std	Y+43, r24	; 0x2b
    1224:	8b a5       	ldd	r24, Y+43	; 0x2b
    1226:	9c a5       	ldd	r25, Y+44	; 0x2c
    1228:	01 97       	sbiw	r24, 0x01	; 1
    122a:	f1 f7       	brne	.-4      	; 0x1228 <display+0x56a>
    122c:	9c a7       	std	Y+44, r25	; 0x2c
    122e:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(2);

	// Display most significant digit of minutes
	PORTA = 0b00000100;
    1230:	eb e3       	ldi	r30, 0x3B	; 59
    1232:	f0 e0       	ldi	r31, 0x00	; 0
    1234:	84 e0       	ldi	r24, 0x04	; 4
    1236:	80 83       	st	Z, r24
	PORTC = (PORTC & 0xF0) | (most_min & 0x0F);
    1238:	a5 e3       	ldi	r26, 0x35	; 53
    123a:	b0 e0       	ldi	r27, 0x00	; 0
    123c:	e5 e3       	ldi	r30, 0x35	; 53
    123e:	f0 e0       	ldi	r31, 0x00	; 0
    1240:	80 81       	ld	r24, Z
    1242:	98 2f       	mov	r25, r24
    1244:	90 7f       	andi	r25, 0xF0	; 240
    1246:	fe 01       	movw	r30, r28
    1248:	ea 59       	subi	r30, 0x9A	; 154
    124a:	ff 4f       	sbci	r31, 0xFF	; 255
    124c:	80 81       	ld	r24, Z
    124e:	8f 70       	andi	r24, 0x0F	; 15
    1250:	89 2b       	or	r24, r25
    1252:	8c 93       	st	X, r24
    1254:	80 e0       	ldi	r24, 0x00	; 0
    1256:	90 e0       	ldi	r25, 0x00	; 0
    1258:	a0 e0       	ldi	r26, 0x00	; 0
    125a:	b0 e4       	ldi	r27, 0x40	; 64
    125c:	8f a3       	std	Y+39, r24	; 0x27
    125e:	98 a7       	std	Y+40, r25	; 0x28
    1260:	a9 a7       	std	Y+41, r26	; 0x29
    1262:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1264:	6f a1       	ldd	r22, Y+39	; 0x27
    1266:	78 a5       	ldd	r23, Y+40	; 0x28
    1268:	89 a5       	ldd	r24, Y+41	; 0x29
    126a:	9a a5       	ldd	r25, Y+42	; 0x2a
    126c:	20 e0       	ldi	r18, 0x00	; 0
    126e:	30 e0       	ldi	r19, 0x00	; 0
    1270:	4a e7       	ldi	r20, 0x7A	; 122
    1272:	55 e4       	ldi	r21, 0x45	; 69
    1274:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1278:	dc 01       	movw	r26, r24
    127a:	cb 01       	movw	r24, r22
    127c:	8b a3       	std	Y+35, r24	; 0x23
    127e:	9c a3       	std	Y+36, r25	; 0x24
    1280:	ad a3       	std	Y+37, r26	; 0x25
    1282:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1284:	6b a1       	ldd	r22, Y+35	; 0x23
    1286:	7c a1       	ldd	r23, Y+36	; 0x24
    1288:	8d a1       	ldd	r24, Y+37	; 0x25
    128a:	9e a1       	ldd	r25, Y+38	; 0x26
    128c:	20 e0       	ldi	r18, 0x00	; 0
    128e:	30 e0       	ldi	r19, 0x00	; 0
    1290:	40 e8       	ldi	r20, 0x80	; 128
    1292:	5f e3       	ldi	r21, 0x3F	; 63
    1294:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1298:	88 23       	and	r24, r24
    129a:	2c f4       	brge	.+10     	; 0x12a6 <display+0x5e8>
		__ticks = 1;
    129c:	81 e0       	ldi	r24, 0x01	; 1
    129e:	90 e0       	ldi	r25, 0x00	; 0
    12a0:	9a a3       	std	Y+34, r25	; 0x22
    12a2:	89 a3       	std	Y+33, r24	; 0x21
    12a4:	3f c0       	rjmp	.+126    	; 0x1324 <display+0x666>
	else if (__tmp > 65535)
    12a6:	6b a1       	ldd	r22, Y+35	; 0x23
    12a8:	7c a1       	ldd	r23, Y+36	; 0x24
    12aa:	8d a1       	ldd	r24, Y+37	; 0x25
    12ac:	9e a1       	ldd	r25, Y+38	; 0x26
    12ae:	20 e0       	ldi	r18, 0x00	; 0
    12b0:	3f ef       	ldi	r19, 0xFF	; 255
    12b2:	4f e7       	ldi	r20, 0x7F	; 127
    12b4:	57 e4       	ldi	r21, 0x47	; 71
    12b6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    12ba:	18 16       	cp	r1, r24
    12bc:	4c f5       	brge	.+82     	; 0x1310 <display+0x652>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    12be:	6f a1       	ldd	r22, Y+39	; 0x27
    12c0:	78 a5       	ldd	r23, Y+40	; 0x28
    12c2:	89 a5       	ldd	r24, Y+41	; 0x29
    12c4:	9a a5       	ldd	r25, Y+42	; 0x2a
    12c6:	20 e0       	ldi	r18, 0x00	; 0
    12c8:	30 e0       	ldi	r19, 0x00	; 0
    12ca:	40 e2       	ldi	r20, 0x20	; 32
    12cc:	51 e4       	ldi	r21, 0x41	; 65
    12ce:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    12d2:	dc 01       	movw	r26, r24
    12d4:	cb 01       	movw	r24, r22
    12d6:	bc 01       	movw	r22, r24
    12d8:	cd 01       	movw	r24, r26
    12da:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    12de:	dc 01       	movw	r26, r24
    12e0:	cb 01       	movw	r24, r22
    12e2:	9a a3       	std	Y+34, r25	; 0x22
    12e4:	89 a3       	std	Y+33, r24	; 0x21
    12e6:	0f c0       	rjmp	.+30     	; 0x1306 <display+0x648>
    12e8:	80 e9       	ldi	r24, 0x90	; 144
    12ea:	91 e0       	ldi	r25, 0x01	; 1
    12ec:	98 a3       	std	Y+32, r25	; 0x20
    12ee:	8f 8f       	std	Y+31, r24	; 0x1f
    12f0:	8f 8d       	ldd	r24, Y+31	; 0x1f
    12f2:	98 a1       	ldd	r25, Y+32	; 0x20
    12f4:	01 97       	sbiw	r24, 0x01	; 1
    12f6:	f1 f7       	brne	.-4      	; 0x12f4 <display+0x636>
    12f8:	98 a3       	std	Y+32, r25	; 0x20
    12fa:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    12fc:	89 a1       	ldd	r24, Y+33	; 0x21
    12fe:	9a a1       	ldd	r25, Y+34	; 0x22
    1300:	01 97       	sbiw	r24, 0x01	; 1
    1302:	9a a3       	std	Y+34, r25	; 0x22
    1304:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1306:	89 a1       	ldd	r24, Y+33	; 0x21
    1308:	9a a1       	ldd	r25, Y+34	; 0x22
    130a:	00 97       	sbiw	r24, 0x00	; 0
    130c:	69 f7       	brne	.-38     	; 0x12e8 <display+0x62a>
    130e:	14 c0       	rjmp	.+40     	; 0x1338 <display+0x67a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1310:	6b a1       	ldd	r22, Y+35	; 0x23
    1312:	7c a1       	ldd	r23, Y+36	; 0x24
    1314:	8d a1       	ldd	r24, Y+37	; 0x25
    1316:	9e a1       	ldd	r25, Y+38	; 0x26
    1318:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    131c:	dc 01       	movw	r26, r24
    131e:	cb 01       	movw	r24, r22
    1320:	9a a3       	std	Y+34, r25	; 0x22
    1322:	89 a3       	std	Y+33, r24	; 0x21
    1324:	89 a1       	ldd	r24, Y+33	; 0x21
    1326:	9a a1       	ldd	r25, Y+34	; 0x22
    1328:	9e 8f       	std	Y+30, r25	; 0x1e
    132a:	8d 8f       	std	Y+29, r24	; 0x1d
    132c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    132e:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1330:	01 97       	sbiw	r24, 0x01	; 1
    1332:	f1 f7       	brne	.-4      	; 0x1330 <display+0x672>
    1334:	9e 8f       	std	Y+30, r25	; 0x1e
    1336:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(2);

	// Display least significant digit of hours
	PORTA = 0b00000010;
    1338:	eb e3       	ldi	r30, 0x3B	; 59
    133a:	f0 e0       	ldi	r31, 0x00	; 0
    133c:	82 e0       	ldi	r24, 0x02	; 2
    133e:	80 83       	st	Z, r24
	PORTC = (PORTC & 0xF0) | (least_hour & 0x0F);
    1340:	a5 e3       	ldi	r26, 0x35	; 53
    1342:	b0 e0       	ldi	r27, 0x00	; 0
    1344:	e5 e3       	ldi	r30, 0x35	; 53
    1346:	f0 e0       	ldi	r31, 0x00	; 0
    1348:	80 81       	ld	r24, Z
    134a:	98 2f       	mov	r25, r24
    134c:	90 7f       	andi	r25, 0xF0	; 240
    134e:	fe 01       	movw	r30, r28
    1350:	e9 59       	subi	r30, 0x99	; 153
    1352:	ff 4f       	sbci	r31, 0xFF	; 255
    1354:	80 81       	ld	r24, Z
    1356:	8f 70       	andi	r24, 0x0F	; 15
    1358:	89 2b       	or	r24, r25
    135a:	8c 93       	st	X, r24
    135c:	80 e0       	ldi	r24, 0x00	; 0
    135e:	90 e0       	ldi	r25, 0x00	; 0
    1360:	a0 e0       	ldi	r26, 0x00	; 0
    1362:	b0 e4       	ldi	r27, 0x40	; 64
    1364:	89 8f       	std	Y+25, r24	; 0x19
    1366:	9a 8f       	std	Y+26, r25	; 0x1a
    1368:	ab 8f       	std	Y+27, r26	; 0x1b
    136a:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    136c:	69 8d       	ldd	r22, Y+25	; 0x19
    136e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1370:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1372:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1374:	20 e0       	ldi	r18, 0x00	; 0
    1376:	30 e0       	ldi	r19, 0x00	; 0
    1378:	4a e7       	ldi	r20, 0x7A	; 122
    137a:	55 e4       	ldi	r21, 0x45	; 69
    137c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1380:	dc 01       	movw	r26, r24
    1382:	cb 01       	movw	r24, r22
    1384:	8d 8b       	std	Y+21, r24	; 0x15
    1386:	9e 8b       	std	Y+22, r25	; 0x16
    1388:	af 8b       	std	Y+23, r26	; 0x17
    138a:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    138c:	6d 89       	ldd	r22, Y+21	; 0x15
    138e:	7e 89       	ldd	r23, Y+22	; 0x16
    1390:	8f 89       	ldd	r24, Y+23	; 0x17
    1392:	98 8d       	ldd	r25, Y+24	; 0x18
    1394:	20 e0       	ldi	r18, 0x00	; 0
    1396:	30 e0       	ldi	r19, 0x00	; 0
    1398:	40 e8       	ldi	r20, 0x80	; 128
    139a:	5f e3       	ldi	r21, 0x3F	; 63
    139c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    13a0:	88 23       	and	r24, r24
    13a2:	2c f4       	brge	.+10     	; 0x13ae <display+0x6f0>
		__ticks = 1;
    13a4:	81 e0       	ldi	r24, 0x01	; 1
    13a6:	90 e0       	ldi	r25, 0x00	; 0
    13a8:	9c 8b       	std	Y+20, r25	; 0x14
    13aa:	8b 8b       	std	Y+19, r24	; 0x13
    13ac:	3f c0       	rjmp	.+126    	; 0x142c <display+0x76e>
	else if (__tmp > 65535)
    13ae:	6d 89       	ldd	r22, Y+21	; 0x15
    13b0:	7e 89       	ldd	r23, Y+22	; 0x16
    13b2:	8f 89       	ldd	r24, Y+23	; 0x17
    13b4:	98 8d       	ldd	r25, Y+24	; 0x18
    13b6:	20 e0       	ldi	r18, 0x00	; 0
    13b8:	3f ef       	ldi	r19, 0xFF	; 255
    13ba:	4f e7       	ldi	r20, 0x7F	; 127
    13bc:	57 e4       	ldi	r21, 0x47	; 71
    13be:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    13c2:	18 16       	cp	r1, r24
    13c4:	4c f5       	brge	.+82     	; 0x1418 <display+0x75a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    13c6:	69 8d       	ldd	r22, Y+25	; 0x19
    13c8:	7a 8d       	ldd	r23, Y+26	; 0x1a
    13ca:	8b 8d       	ldd	r24, Y+27	; 0x1b
    13cc:	9c 8d       	ldd	r25, Y+28	; 0x1c
    13ce:	20 e0       	ldi	r18, 0x00	; 0
    13d0:	30 e0       	ldi	r19, 0x00	; 0
    13d2:	40 e2       	ldi	r20, 0x20	; 32
    13d4:	51 e4       	ldi	r21, 0x41	; 65
    13d6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    13da:	dc 01       	movw	r26, r24
    13dc:	cb 01       	movw	r24, r22
    13de:	bc 01       	movw	r22, r24
    13e0:	cd 01       	movw	r24, r26
    13e2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    13e6:	dc 01       	movw	r26, r24
    13e8:	cb 01       	movw	r24, r22
    13ea:	9c 8b       	std	Y+20, r25	; 0x14
    13ec:	8b 8b       	std	Y+19, r24	; 0x13
    13ee:	0f c0       	rjmp	.+30     	; 0x140e <display+0x750>
    13f0:	80 e9       	ldi	r24, 0x90	; 144
    13f2:	91 e0       	ldi	r25, 0x01	; 1
    13f4:	9a 8b       	std	Y+18, r25	; 0x12
    13f6:	89 8b       	std	Y+17, r24	; 0x11
    13f8:	89 89       	ldd	r24, Y+17	; 0x11
    13fa:	9a 89       	ldd	r25, Y+18	; 0x12
    13fc:	01 97       	sbiw	r24, 0x01	; 1
    13fe:	f1 f7       	brne	.-4      	; 0x13fc <display+0x73e>
    1400:	9a 8b       	std	Y+18, r25	; 0x12
    1402:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1404:	8b 89       	ldd	r24, Y+19	; 0x13
    1406:	9c 89       	ldd	r25, Y+20	; 0x14
    1408:	01 97       	sbiw	r24, 0x01	; 1
    140a:	9c 8b       	std	Y+20, r25	; 0x14
    140c:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    140e:	8b 89       	ldd	r24, Y+19	; 0x13
    1410:	9c 89       	ldd	r25, Y+20	; 0x14
    1412:	00 97       	sbiw	r24, 0x00	; 0
    1414:	69 f7       	brne	.-38     	; 0x13f0 <display+0x732>
    1416:	14 c0       	rjmp	.+40     	; 0x1440 <display+0x782>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1418:	6d 89       	ldd	r22, Y+21	; 0x15
    141a:	7e 89       	ldd	r23, Y+22	; 0x16
    141c:	8f 89       	ldd	r24, Y+23	; 0x17
    141e:	98 8d       	ldd	r25, Y+24	; 0x18
    1420:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1424:	dc 01       	movw	r26, r24
    1426:	cb 01       	movw	r24, r22
    1428:	9c 8b       	std	Y+20, r25	; 0x14
    142a:	8b 8b       	std	Y+19, r24	; 0x13
    142c:	8b 89       	ldd	r24, Y+19	; 0x13
    142e:	9c 89       	ldd	r25, Y+20	; 0x14
    1430:	98 8b       	std	Y+16, r25	; 0x10
    1432:	8f 87       	std	Y+15, r24	; 0x0f
    1434:	8f 85       	ldd	r24, Y+15	; 0x0f
    1436:	98 89       	ldd	r25, Y+16	; 0x10
    1438:	01 97       	sbiw	r24, 0x01	; 1
    143a:	f1 f7       	brne	.-4      	; 0x1438 <display+0x77a>
    143c:	98 8b       	std	Y+16, r25	; 0x10
    143e:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(2);

	// Display most significant digit of hours
	PORTA = 0b00000001;
    1440:	eb e3       	ldi	r30, 0x3B	; 59
    1442:	f0 e0       	ldi	r31, 0x00	; 0
    1444:	81 e0       	ldi	r24, 0x01	; 1
    1446:	80 83       	st	Z, r24
	PORTC = (PORTC & 0xF0) | (most_hour & 0x0F);
    1448:	a5 e3       	ldi	r26, 0x35	; 53
    144a:	b0 e0       	ldi	r27, 0x00	; 0
    144c:	e5 e3       	ldi	r30, 0x35	; 53
    144e:	f0 e0       	ldi	r31, 0x00	; 0
    1450:	80 81       	ld	r24, Z
    1452:	98 2f       	mov	r25, r24
    1454:	90 7f       	andi	r25, 0xF0	; 240
    1456:	fe 01       	movw	r30, r28
    1458:	e8 59       	subi	r30, 0x98	; 152
    145a:	ff 4f       	sbci	r31, 0xFF	; 255
    145c:	80 81       	ld	r24, Z
    145e:	8f 70       	andi	r24, 0x0F	; 15
    1460:	89 2b       	or	r24, r25
    1462:	8c 93       	st	X, r24
    1464:	80 e0       	ldi	r24, 0x00	; 0
    1466:	90 e0       	ldi	r25, 0x00	; 0
    1468:	a0 e0       	ldi	r26, 0x00	; 0
    146a:	b0 e4       	ldi	r27, 0x40	; 64
    146c:	8b 87       	std	Y+11, r24	; 0x0b
    146e:	9c 87       	std	Y+12, r25	; 0x0c
    1470:	ad 87       	std	Y+13, r26	; 0x0d
    1472:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1474:	6b 85       	ldd	r22, Y+11	; 0x0b
    1476:	7c 85       	ldd	r23, Y+12	; 0x0c
    1478:	8d 85       	ldd	r24, Y+13	; 0x0d
    147a:	9e 85       	ldd	r25, Y+14	; 0x0e
    147c:	20 e0       	ldi	r18, 0x00	; 0
    147e:	30 e0       	ldi	r19, 0x00	; 0
    1480:	4a e7       	ldi	r20, 0x7A	; 122
    1482:	55 e4       	ldi	r21, 0x45	; 69
    1484:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1488:	dc 01       	movw	r26, r24
    148a:	cb 01       	movw	r24, r22
    148c:	8f 83       	std	Y+7, r24	; 0x07
    148e:	98 87       	std	Y+8, r25	; 0x08
    1490:	a9 87       	std	Y+9, r26	; 0x09
    1492:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1494:	6f 81       	ldd	r22, Y+7	; 0x07
    1496:	78 85       	ldd	r23, Y+8	; 0x08
    1498:	89 85       	ldd	r24, Y+9	; 0x09
    149a:	9a 85       	ldd	r25, Y+10	; 0x0a
    149c:	20 e0       	ldi	r18, 0x00	; 0
    149e:	30 e0       	ldi	r19, 0x00	; 0
    14a0:	40 e8       	ldi	r20, 0x80	; 128
    14a2:	5f e3       	ldi	r21, 0x3F	; 63
    14a4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    14a8:	88 23       	and	r24, r24
    14aa:	2c f4       	brge	.+10     	; 0x14b6 <display+0x7f8>
		__ticks = 1;
    14ac:	81 e0       	ldi	r24, 0x01	; 1
    14ae:	90 e0       	ldi	r25, 0x00	; 0
    14b0:	9e 83       	std	Y+6, r25	; 0x06
    14b2:	8d 83       	std	Y+5, r24	; 0x05
    14b4:	3f c0       	rjmp	.+126    	; 0x1534 <display+0x876>
	else if (__tmp > 65535)
    14b6:	6f 81       	ldd	r22, Y+7	; 0x07
    14b8:	78 85       	ldd	r23, Y+8	; 0x08
    14ba:	89 85       	ldd	r24, Y+9	; 0x09
    14bc:	9a 85       	ldd	r25, Y+10	; 0x0a
    14be:	20 e0       	ldi	r18, 0x00	; 0
    14c0:	3f ef       	ldi	r19, 0xFF	; 255
    14c2:	4f e7       	ldi	r20, 0x7F	; 127
    14c4:	57 e4       	ldi	r21, 0x47	; 71
    14c6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    14ca:	18 16       	cp	r1, r24
    14cc:	4c f5       	brge	.+82     	; 0x1520 <display+0x862>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    14ce:	6b 85       	ldd	r22, Y+11	; 0x0b
    14d0:	7c 85       	ldd	r23, Y+12	; 0x0c
    14d2:	8d 85       	ldd	r24, Y+13	; 0x0d
    14d4:	9e 85       	ldd	r25, Y+14	; 0x0e
    14d6:	20 e0       	ldi	r18, 0x00	; 0
    14d8:	30 e0       	ldi	r19, 0x00	; 0
    14da:	40 e2       	ldi	r20, 0x20	; 32
    14dc:	51 e4       	ldi	r21, 0x41	; 65
    14de:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    14e2:	dc 01       	movw	r26, r24
    14e4:	cb 01       	movw	r24, r22
    14e6:	bc 01       	movw	r22, r24
    14e8:	cd 01       	movw	r24, r26
    14ea:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    14ee:	dc 01       	movw	r26, r24
    14f0:	cb 01       	movw	r24, r22
    14f2:	9e 83       	std	Y+6, r25	; 0x06
    14f4:	8d 83       	std	Y+5, r24	; 0x05
    14f6:	0f c0       	rjmp	.+30     	; 0x1516 <display+0x858>
    14f8:	80 e9       	ldi	r24, 0x90	; 144
    14fa:	91 e0       	ldi	r25, 0x01	; 1
    14fc:	9c 83       	std	Y+4, r25	; 0x04
    14fe:	8b 83       	std	Y+3, r24	; 0x03
    1500:	8b 81       	ldd	r24, Y+3	; 0x03
    1502:	9c 81       	ldd	r25, Y+4	; 0x04
    1504:	01 97       	sbiw	r24, 0x01	; 1
    1506:	f1 f7       	brne	.-4      	; 0x1504 <display+0x846>
    1508:	9c 83       	std	Y+4, r25	; 0x04
    150a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    150c:	8d 81       	ldd	r24, Y+5	; 0x05
    150e:	9e 81       	ldd	r25, Y+6	; 0x06
    1510:	01 97       	sbiw	r24, 0x01	; 1
    1512:	9e 83       	std	Y+6, r25	; 0x06
    1514:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1516:	8d 81       	ldd	r24, Y+5	; 0x05
    1518:	9e 81       	ldd	r25, Y+6	; 0x06
    151a:	00 97       	sbiw	r24, 0x00	; 0
    151c:	69 f7       	brne	.-38     	; 0x14f8 <display+0x83a>
    151e:	14 c0       	rjmp	.+40     	; 0x1548 <display+0x88a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1520:	6f 81       	ldd	r22, Y+7	; 0x07
    1522:	78 85       	ldd	r23, Y+8	; 0x08
    1524:	89 85       	ldd	r24, Y+9	; 0x09
    1526:	9a 85       	ldd	r25, Y+10	; 0x0a
    1528:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    152c:	dc 01       	movw	r26, r24
    152e:	cb 01       	movw	r24, r22
    1530:	9e 83       	std	Y+6, r25	; 0x06
    1532:	8d 83       	std	Y+5, r24	; 0x05
    1534:	8d 81       	ldd	r24, Y+5	; 0x05
    1536:	9e 81       	ldd	r25, Y+6	; 0x06
    1538:	9a 83       	std	Y+2, r25	; 0x02
    153a:	89 83       	std	Y+1, r24	; 0x01
    153c:	89 81       	ldd	r24, Y+1	; 0x01
    153e:	9a 81       	ldd	r25, Y+2	; 0x02
    1540:	01 97       	sbiw	r24, 0x01	; 1
    1542:	f1 f7       	brne	.-4      	; 0x1540 <display+0x882>
    1544:	9a 83       	std	Y+2, r25	; 0x02
    1546:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
}
    1548:	c8 59       	subi	r28, 0x98	; 152
    154a:	df 4f       	sbci	r29, 0xFF	; 255
    154c:	0f b6       	in	r0, 0x3f	; 63
    154e:	f8 94       	cli
    1550:	de bf       	out	0x3e, r29	; 62
    1552:	0f be       	out	0x3f, r0	; 63
    1554:	cd bf       	out	0x3d, r28	; 61
    1556:	cf 91       	pop	r28
    1558:	df 91       	pop	r29
    155a:	1f 91       	pop	r17
    155c:	0f 91       	pop	r16
    155e:	ef 90       	pop	r14
    1560:	08 95       	ret

00001562 <Adjustment>:

void Adjustment(void)
{
    1562:	ef 92       	push	r14
    1564:	0f 93       	push	r16
    1566:	1f 93       	push	r17
    1568:	df 93       	push	r29
    156a:	cf 93       	push	r28
    156c:	cd b7       	in	r28, 0x3d	; 61
    156e:	de b7       	in	r29, 0x3e	; 62
    1570:	c4 55       	subi	r28, 0x54	; 84
    1572:	d0 40       	sbci	r29, 0x00	; 0
    1574:	0f b6       	in	r0, 0x3f	; 63
    1576:	f8 94       	cli
    1578:	de bf       	out	0x3e, r29	; 62
    157a:	0f be       	out	0x3f, r0	; 63
    157c:	cd bf       	out	0x3d, r28	; 61
	// Hours increment
	if (!(PINB & (1<<1)))
    157e:	e6 e3       	ldi	r30, 0x36	; 54
    1580:	f0 e0       	ldi	r31, 0x00	; 0
    1582:	80 81       	ld	r24, Z
    1584:	88 2f       	mov	r24, r24
    1586:	90 e0       	ldi	r25, 0x00	; 0
    1588:	82 70       	andi	r24, 0x02	; 2
    158a:	90 70       	andi	r25, 0x00	; 0
    158c:	00 97       	sbiw	r24, 0x00	; 0
    158e:	09 f0       	breq	.+2      	; 0x1592 <Adjustment+0x30>
    1590:	dd c0       	rjmp	.+442    	; 0x174c <Adjustment+0x1ea>
    1592:	fe 01       	movw	r30, r28
    1594:	ef 5a       	subi	r30, 0xAF	; 175
    1596:	ff 4f       	sbci	r31, 0xFF	; 255
    1598:	80 e0       	ldi	r24, 0x00	; 0
    159a:	90 e0       	ldi	r25, 0x00	; 0
    159c:	a0 ef       	ldi	r26, 0xF0	; 240
    159e:	b1 e4       	ldi	r27, 0x41	; 65
    15a0:	80 83       	st	Z, r24
    15a2:	91 83       	std	Z+1, r25	; 0x01
    15a4:	a2 83       	std	Z+2, r26	; 0x02
    15a6:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    15a8:	8e 01       	movw	r16, r28
    15aa:	03 5b       	subi	r16, 0xB3	; 179
    15ac:	1f 4f       	sbci	r17, 0xFF	; 255
    15ae:	fe 01       	movw	r30, r28
    15b0:	ef 5a       	subi	r30, 0xAF	; 175
    15b2:	ff 4f       	sbci	r31, 0xFF	; 255
    15b4:	60 81       	ld	r22, Z
    15b6:	71 81       	ldd	r23, Z+1	; 0x01
    15b8:	82 81       	ldd	r24, Z+2	; 0x02
    15ba:	93 81       	ldd	r25, Z+3	; 0x03
    15bc:	20 e0       	ldi	r18, 0x00	; 0
    15be:	30 e0       	ldi	r19, 0x00	; 0
    15c0:	4a e7       	ldi	r20, 0x7A	; 122
    15c2:	55 e4       	ldi	r21, 0x45	; 69
    15c4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    15c8:	dc 01       	movw	r26, r24
    15ca:	cb 01       	movw	r24, r22
    15cc:	f8 01       	movw	r30, r16
    15ce:	80 83       	st	Z, r24
    15d0:	91 83       	std	Z+1, r25	; 0x01
    15d2:	a2 83       	std	Z+2, r26	; 0x02
    15d4:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    15d6:	fe 01       	movw	r30, r28
    15d8:	e3 5b       	subi	r30, 0xB3	; 179
    15da:	ff 4f       	sbci	r31, 0xFF	; 255
    15dc:	60 81       	ld	r22, Z
    15de:	71 81       	ldd	r23, Z+1	; 0x01
    15e0:	82 81       	ldd	r24, Z+2	; 0x02
    15e2:	93 81       	ldd	r25, Z+3	; 0x03
    15e4:	20 e0       	ldi	r18, 0x00	; 0
    15e6:	30 e0       	ldi	r19, 0x00	; 0
    15e8:	40 e8       	ldi	r20, 0x80	; 128
    15ea:	5f e3       	ldi	r21, 0x3F	; 63
    15ec:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    15f0:	88 23       	and	r24, r24
    15f2:	44 f4       	brge	.+16     	; 0x1604 <Adjustment+0xa2>
		__ticks = 1;
    15f4:	fe 01       	movw	r30, r28
    15f6:	e5 5b       	subi	r30, 0xB5	; 181
    15f8:	ff 4f       	sbci	r31, 0xFF	; 255
    15fa:	81 e0       	ldi	r24, 0x01	; 1
    15fc:	90 e0       	ldi	r25, 0x00	; 0
    15fe:	91 83       	std	Z+1, r25	; 0x01
    1600:	80 83       	st	Z, r24
    1602:	64 c0       	rjmp	.+200    	; 0x16cc <Adjustment+0x16a>
	else if (__tmp > 65535)
    1604:	fe 01       	movw	r30, r28
    1606:	e3 5b       	subi	r30, 0xB3	; 179
    1608:	ff 4f       	sbci	r31, 0xFF	; 255
    160a:	60 81       	ld	r22, Z
    160c:	71 81       	ldd	r23, Z+1	; 0x01
    160e:	82 81       	ldd	r24, Z+2	; 0x02
    1610:	93 81       	ldd	r25, Z+3	; 0x03
    1612:	20 e0       	ldi	r18, 0x00	; 0
    1614:	3f ef       	ldi	r19, 0xFF	; 255
    1616:	4f e7       	ldi	r20, 0x7F	; 127
    1618:	57 e4       	ldi	r21, 0x47	; 71
    161a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    161e:	18 16       	cp	r1, r24
    1620:	0c f0       	brlt	.+2      	; 0x1624 <Adjustment+0xc2>
    1622:	43 c0       	rjmp	.+134    	; 0x16aa <Adjustment+0x148>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1624:	fe 01       	movw	r30, r28
    1626:	ef 5a       	subi	r30, 0xAF	; 175
    1628:	ff 4f       	sbci	r31, 0xFF	; 255
    162a:	60 81       	ld	r22, Z
    162c:	71 81       	ldd	r23, Z+1	; 0x01
    162e:	82 81       	ldd	r24, Z+2	; 0x02
    1630:	93 81       	ldd	r25, Z+3	; 0x03
    1632:	20 e0       	ldi	r18, 0x00	; 0
    1634:	30 e0       	ldi	r19, 0x00	; 0
    1636:	40 e2       	ldi	r20, 0x20	; 32
    1638:	51 e4       	ldi	r21, 0x41	; 65
    163a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    163e:	dc 01       	movw	r26, r24
    1640:	cb 01       	movw	r24, r22
    1642:	8e 01       	movw	r16, r28
    1644:	05 5b       	subi	r16, 0xB5	; 181
    1646:	1f 4f       	sbci	r17, 0xFF	; 255
    1648:	bc 01       	movw	r22, r24
    164a:	cd 01       	movw	r24, r26
    164c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1650:	dc 01       	movw	r26, r24
    1652:	cb 01       	movw	r24, r22
    1654:	f8 01       	movw	r30, r16
    1656:	91 83       	std	Z+1, r25	; 0x01
    1658:	80 83       	st	Z, r24
    165a:	1f c0       	rjmp	.+62     	; 0x169a <Adjustment+0x138>
    165c:	fe 01       	movw	r30, r28
    165e:	e7 5b       	subi	r30, 0xB7	; 183
    1660:	ff 4f       	sbci	r31, 0xFF	; 255
    1662:	80 e9       	ldi	r24, 0x90	; 144
    1664:	91 e0       	ldi	r25, 0x01	; 1
    1666:	91 83       	std	Z+1, r25	; 0x01
    1668:	80 83       	st	Z, r24
    166a:	fe 01       	movw	r30, r28
    166c:	e7 5b       	subi	r30, 0xB7	; 183
    166e:	ff 4f       	sbci	r31, 0xFF	; 255
    1670:	80 81       	ld	r24, Z
    1672:	91 81       	ldd	r25, Z+1	; 0x01
    1674:	01 97       	sbiw	r24, 0x01	; 1
    1676:	f1 f7       	brne	.-4      	; 0x1674 <Adjustment+0x112>
    1678:	fe 01       	movw	r30, r28
    167a:	e7 5b       	subi	r30, 0xB7	; 183
    167c:	ff 4f       	sbci	r31, 0xFF	; 255
    167e:	91 83       	std	Z+1, r25	; 0x01
    1680:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1682:	de 01       	movw	r26, r28
    1684:	a5 5b       	subi	r26, 0xB5	; 181
    1686:	bf 4f       	sbci	r27, 0xFF	; 255
    1688:	fe 01       	movw	r30, r28
    168a:	e5 5b       	subi	r30, 0xB5	; 181
    168c:	ff 4f       	sbci	r31, 0xFF	; 255
    168e:	80 81       	ld	r24, Z
    1690:	91 81       	ldd	r25, Z+1	; 0x01
    1692:	01 97       	sbiw	r24, 0x01	; 1
    1694:	11 96       	adiw	r26, 0x01	; 1
    1696:	9c 93       	st	X, r25
    1698:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    169a:	fe 01       	movw	r30, r28
    169c:	e5 5b       	subi	r30, 0xB5	; 181
    169e:	ff 4f       	sbci	r31, 0xFF	; 255
    16a0:	80 81       	ld	r24, Z
    16a2:	91 81       	ldd	r25, Z+1	; 0x01
    16a4:	00 97       	sbiw	r24, 0x00	; 0
    16a6:	d1 f6       	brne	.-76     	; 0x165c <Adjustment+0xfa>
    16a8:	28 c0       	rjmp	.+80     	; 0x16fa <Adjustment+0x198>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    16aa:	8e 01       	movw	r16, r28
    16ac:	05 5b       	subi	r16, 0xB5	; 181
    16ae:	1f 4f       	sbci	r17, 0xFF	; 255
    16b0:	fe 01       	movw	r30, r28
    16b2:	e3 5b       	subi	r30, 0xB3	; 179
    16b4:	ff 4f       	sbci	r31, 0xFF	; 255
    16b6:	60 81       	ld	r22, Z
    16b8:	71 81       	ldd	r23, Z+1	; 0x01
    16ba:	82 81       	ldd	r24, Z+2	; 0x02
    16bc:	93 81       	ldd	r25, Z+3	; 0x03
    16be:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    16c2:	dc 01       	movw	r26, r24
    16c4:	cb 01       	movw	r24, r22
    16c6:	f8 01       	movw	r30, r16
    16c8:	91 83       	std	Z+1, r25	; 0x01
    16ca:	80 83       	st	Z, r24
    16cc:	de 01       	movw	r26, r28
    16ce:	a9 5b       	subi	r26, 0xB9	; 185
    16d0:	bf 4f       	sbci	r27, 0xFF	; 255
    16d2:	fe 01       	movw	r30, r28
    16d4:	e5 5b       	subi	r30, 0xB5	; 181
    16d6:	ff 4f       	sbci	r31, 0xFF	; 255
    16d8:	80 81       	ld	r24, Z
    16da:	91 81       	ldd	r25, Z+1	; 0x01
    16dc:	11 96       	adiw	r26, 0x01	; 1
    16de:	9c 93       	st	X, r25
    16e0:	8e 93       	st	-X, r24
    16e2:	fe 01       	movw	r30, r28
    16e4:	e9 5b       	subi	r30, 0xB9	; 185
    16e6:	ff 4f       	sbci	r31, 0xFF	; 255
    16e8:	80 81       	ld	r24, Z
    16ea:	91 81       	ldd	r25, Z+1	; 0x01
    16ec:	01 97       	sbiw	r24, 0x01	; 1
    16ee:	f1 f7       	brne	.-4      	; 0x16ec <Adjustment+0x18a>
    16f0:	fe 01       	movw	r30, r28
    16f2:	e9 5b       	subi	r30, 0xB9	; 185
    16f4:	ff 4f       	sbci	r31, 0xFF	; 255
    16f6:	91 83       	std	Z+1, r25	; 0x01
    16f8:	80 83       	st	Z, r24
	{
		_delay_ms(30);
		if (!(PINB & (1<<1)))
    16fa:	e6 e3       	ldi	r30, 0x36	; 54
    16fc:	f0 e0       	ldi	r31, 0x00	; 0
    16fe:	80 81       	ld	r24, Z
    1700:	88 2f       	mov	r24, r24
    1702:	90 e0       	ldi	r25, 0x00	; 0
    1704:	82 70       	andi	r24, 0x02	; 2
    1706:	90 70       	andi	r25, 0x00	; 0
    1708:	00 97       	sbiw	r24, 0x00	; 0
    170a:	11 f5       	brne	.+68     	; 0x1750 <Adjustment+0x1ee>
		{
			if(incHourFlag == 0)
    170c:	80 91 6f 00 	lds	r24, 0x006F
    1710:	88 23       	and	r24, r24
    1712:	f1 f4       	brne	.+60     	; 0x1750 <Adjustment+0x1ee>
			{
			INCREMENT_TIME(least_hour, most_hour, 9, 9);
    1714:	80 91 6a 00 	lds	r24, 0x006A
    1718:	89 30       	cpi	r24, 0x09	; 9
    171a:	79 f4       	brne	.+30     	; 0x173a <Adjustment+0x1d8>
    171c:	10 92 6a 00 	sts	0x006A, r1
    1720:	80 91 69 00 	lds	r24, 0x0069
    1724:	89 30       	cpi	r24, 0x09	; 9
    1726:	19 f4       	brne	.+6      	; 0x172e <Adjustment+0x1cc>
    1728:	10 92 69 00 	sts	0x0069, r1
    172c:	0b c0       	rjmp	.+22     	; 0x1744 <Adjustment+0x1e2>
    172e:	80 91 69 00 	lds	r24, 0x0069
    1732:	8f 5f       	subi	r24, 0xFF	; 255
    1734:	80 93 69 00 	sts	0x0069, r24
    1738:	05 c0       	rjmp	.+10     	; 0x1744 <Adjustment+0x1e2>
    173a:	80 91 6a 00 	lds	r24, 0x006A
    173e:	8f 5f       	subi	r24, 0xFF	; 255
    1740:	80 93 6a 00 	sts	0x006A, r24
			incHourFlag = 1;
    1744:	81 e0       	ldi	r24, 0x01	; 1
    1746:	80 93 6f 00 	sts	0x006F, r24
    174a:	02 c0       	rjmp	.+4      	; 0x1750 <Adjustment+0x1ee>
			}
		}
	}
	else incHourFlag = 0;
    174c:	10 92 6f 00 	sts	0x006F, r1

	// Hours decrement
	if (!(PINB & (1<<0)))
    1750:	e6 e3       	ldi	r30, 0x36	; 54
    1752:	f0 e0       	ldi	r31, 0x00	; 0
    1754:	80 81       	ld	r24, Z
    1756:	88 2f       	mov	r24, r24
    1758:	90 e0       	ldi	r25, 0x00	; 0
    175a:	81 70       	andi	r24, 0x01	; 1
    175c:	90 70       	andi	r25, 0x00	; 0
    175e:	00 97       	sbiw	r24, 0x00	; 0
    1760:	09 f0       	breq	.+2      	; 0x1764 <Adjustment+0x202>
    1762:	b0 c0       	rjmp	.+352    	; 0x18c4 <Adjustment+0x362>
    1764:	fe 01       	movw	r30, r28
    1766:	ed 5b       	subi	r30, 0xBD	; 189
    1768:	ff 4f       	sbci	r31, 0xFF	; 255
    176a:	80 e0       	ldi	r24, 0x00	; 0
    176c:	90 e0       	ldi	r25, 0x00	; 0
    176e:	a0 ef       	ldi	r26, 0xF0	; 240
    1770:	b1 e4       	ldi	r27, 0x41	; 65
    1772:	80 83       	st	Z, r24
    1774:	91 83       	std	Z+1, r25	; 0x01
    1776:	a2 83       	std	Z+2, r26	; 0x02
    1778:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    177a:	8e 01       	movw	r16, r28
    177c:	01 5c       	subi	r16, 0xC1	; 193
    177e:	1f 4f       	sbci	r17, 0xFF	; 255
    1780:	fe 01       	movw	r30, r28
    1782:	ed 5b       	subi	r30, 0xBD	; 189
    1784:	ff 4f       	sbci	r31, 0xFF	; 255
    1786:	60 81       	ld	r22, Z
    1788:	71 81       	ldd	r23, Z+1	; 0x01
    178a:	82 81       	ldd	r24, Z+2	; 0x02
    178c:	93 81       	ldd	r25, Z+3	; 0x03
    178e:	20 e0       	ldi	r18, 0x00	; 0
    1790:	30 e0       	ldi	r19, 0x00	; 0
    1792:	4a e7       	ldi	r20, 0x7A	; 122
    1794:	55 e4       	ldi	r21, 0x45	; 69
    1796:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    179a:	dc 01       	movw	r26, r24
    179c:	cb 01       	movw	r24, r22
    179e:	f8 01       	movw	r30, r16
    17a0:	80 83       	st	Z, r24
    17a2:	91 83       	std	Z+1, r25	; 0x01
    17a4:	a2 83       	std	Z+2, r26	; 0x02
    17a6:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    17a8:	fe 01       	movw	r30, r28
    17aa:	ff 96       	adiw	r30, 0x3f	; 63
    17ac:	60 81       	ld	r22, Z
    17ae:	71 81       	ldd	r23, Z+1	; 0x01
    17b0:	82 81       	ldd	r24, Z+2	; 0x02
    17b2:	93 81       	ldd	r25, Z+3	; 0x03
    17b4:	20 e0       	ldi	r18, 0x00	; 0
    17b6:	30 e0       	ldi	r19, 0x00	; 0
    17b8:	40 e8       	ldi	r20, 0x80	; 128
    17ba:	5f e3       	ldi	r21, 0x3F	; 63
    17bc:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    17c0:	88 23       	and	r24, r24
    17c2:	2c f4       	brge	.+10     	; 0x17ce <Adjustment+0x26c>
		__ticks = 1;
    17c4:	81 e0       	ldi	r24, 0x01	; 1
    17c6:	90 e0       	ldi	r25, 0x00	; 0
    17c8:	9e af       	std	Y+62, r25	; 0x3e
    17ca:	8d af       	std	Y+61, r24	; 0x3d
    17cc:	46 c0       	rjmp	.+140    	; 0x185a <Adjustment+0x2f8>
	else if (__tmp > 65535)
    17ce:	fe 01       	movw	r30, r28
    17d0:	ff 96       	adiw	r30, 0x3f	; 63
    17d2:	60 81       	ld	r22, Z
    17d4:	71 81       	ldd	r23, Z+1	; 0x01
    17d6:	82 81       	ldd	r24, Z+2	; 0x02
    17d8:	93 81       	ldd	r25, Z+3	; 0x03
    17da:	20 e0       	ldi	r18, 0x00	; 0
    17dc:	3f ef       	ldi	r19, 0xFF	; 255
    17de:	4f e7       	ldi	r20, 0x7F	; 127
    17e0:	57 e4       	ldi	r21, 0x47	; 71
    17e2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    17e6:	18 16       	cp	r1, r24
    17e8:	64 f5       	brge	.+88     	; 0x1842 <Adjustment+0x2e0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    17ea:	fe 01       	movw	r30, r28
    17ec:	ed 5b       	subi	r30, 0xBD	; 189
    17ee:	ff 4f       	sbci	r31, 0xFF	; 255
    17f0:	60 81       	ld	r22, Z
    17f2:	71 81       	ldd	r23, Z+1	; 0x01
    17f4:	82 81       	ldd	r24, Z+2	; 0x02
    17f6:	93 81       	ldd	r25, Z+3	; 0x03
    17f8:	20 e0       	ldi	r18, 0x00	; 0
    17fa:	30 e0       	ldi	r19, 0x00	; 0
    17fc:	40 e2       	ldi	r20, 0x20	; 32
    17fe:	51 e4       	ldi	r21, 0x41	; 65
    1800:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1804:	dc 01       	movw	r26, r24
    1806:	cb 01       	movw	r24, r22
    1808:	bc 01       	movw	r22, r24
    180a:	cd 01       	movw	r24, r26
    180c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1810:	dc 01       	movw	r26, r24
    1812:	cb 01       	movw	r24, r22
    1814:	9e af       	std	Y+62, r25	; 0x3e
    1816:	8d af       	std	Y+61, r24	; 0x3d
    1818:	0f c0       	rjmp	.+30     	; 0x1838 <Adjustment+0x2d6>
    181a:	80 e9       	ldi	r24, 0x90	; 144
    181c:	91 e0       	ldi	r25, 0x01	; 1
    181e:	9c af       	std	Y+60, r25	; 0x3c
    1820:	8b af       	std	Y+59, r24	; 0x3b
    1822:	8b ad       	ldd	r24, Y+59	; 0x3b
    1824:	9c ad       	ldd	r25, Y+60	; 0x3c
    1826:	01 97       	sbiw	r24, 0x01	; 1
    1828:	f1 f7       	brne	.-4      	; 0x1826 <Adjustment+0x2c4>
    182a:	9c af       	std	Y+60, r25	; 0x3c
    182c:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    182e:	8d ad       	ldd	r24, Y+61	; 0x3d
    1830:	9e ad       	ldd	r25, Y+62	; 0x3e
    1832:	01 97       	sbiw	r24, 0x01	; 1
    1834:	9e af       	std	Y+62, r25	; 0x3e
    1836:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1838:	8d ad       	ldd	r24, Y+61	; 0x3d
    183a:	9e ad       	ldd	r25, Y+62	; 0x3e
    183c:	00 97       	sbiw	r24, 0x00	; 0
    183e:	69 f7       	brne	.-38     	; 0x181a <Adjustment+0x2b8>
    1840:	16 c0       	rjmp	.+44     	; 0x186e <Adjustment+0x30c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1842:	fe 01       	movw	r30, r28
    1844:	ff 96       	adiw	r30, 0x3f	; 63
    1846:	60 81       	ld	r22, Z
    1848:	71 81       	ldd	r23, Z+1	; 0x01
    184a:	82 81       	ldd	r24, Z+2	; 0x02
    184c:	93 81       	ldd	r25, Z+3	; 0x03
    184e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1852:	dc 01       	movw	r26, r24
    1854:	cb 01       	movw	r24, r22
    1856:	9e af       	std	Y+62, r25	; 0x3e
    1858:	8d af       	std	Y+61, r24	; 0x3d
    185a:	8d ad       	ldd	r24, Y+61	; 0x3d
    185c:	9e ad       	ldd	r25, Y+62	; 0x3e
    185e:	9a af       	std	Y+58, r25	; 0x3a
    1860:	89 af       	std	Y+57, r24	; 0x39
    1862:	89 ad       	ldd	r24, Y+57	; 0x39
    1864:	9a ad       	ldd	r25, Y+58	; 0x3a
    1866:	01 97       	sbiw	r24, 0x01	; 1
    1868:	f1 f7       	brne	.-4      	; 0x1866 <Adjustment+0x304>
    186a:	9a af       	std	Y+58, r25	; 0x3a
    186c:	89 af       	std	Y+57, r24	; 0x39
	{
		_delay_ms(30);
		if (!(PINB & (1<<0)))
    186e:	e6 e3       	ldi	r30, 0x36	; 54
    1870:	f0 e0       	ldi	r31, 0x00	; 0
    1872:	80 81       	ld	r24, Z
    1874:	88 2f       	mov	r24, r24
    1876:	90 e0       	ldi	r25, 0x00	; 0
    1878:	81 70       	andi	r24, 0x01	; 1
    187a:	90 70       	andi	r25, 0x00	; 0
    187c:	00 97       	sbiw	r24, 0x00	; 0
    187e:	21 f5       	brne	.+72     	; 0x18c8 <Adjustment+0x366>
		{
			if(decHourFlag == 0)
    1880:	80 91 70 00 	lds	r24, 0x0070
    1884:	88 23       	and	r24, r24
    1886:	01 f5       	brne	.+64     	; 0x18c8 <Adjustment+0x366>
			{
			DECREMENT_TIME(least_hour, most_hour, 9, 9);
    1888:	80 91 6a 00 	lds	r24, 0x006A
    188c:	88 23       	and	r24, r24
    188e:	89 f4       	brne	.+34     	; 0x18b2 <Adjustment+0x350>
    1890:	89 e0       	ldi	r24, 0x09	; 9
    1892:	80 93 6a 00 	sts	0x006A, r24
    1896:	80 91 69 00 	lds	r24, 0x0069
    189a:	88 23       	and	r24, r24
    189c:	21 f4       	brne	.+8      	; 0x18a6 <Adjustment+0x344>
    189e:	89 e0       	ldi	r24, 0x09	; 9
    18a0:	80 93 69 00 	sts	0x0069, r24
    18a4:	0b c0       	rjmp	.+22     	; 0x18bc <Adjustment+0x35a>
    18a6:	80 91 69 00 	lds	r24, 0x0069
    18aa:	81 50       	subi	r24, 0x01	; 1
    18ac:	80 93 69 00 	sts	0x0069, r24
    18b0:	05 c0       	rjmp	.+10     	; 0x18bc <Adjustment+0x35a>
    18b2:	80 91 6a 00 	lds	r24, 0x006A
    18b6:	81 50       	subi	r24, 0x01	; 1
    18b8:	80 93 6a 00 	sts	0x006A, r24
			decHourFlag = 1;
    18bc:	81 e0       	ldi	r24, 0x01	; 1
    18be:	80 93 70 00 	sts	0x0070, r24
    18c2:	02 c0       	rjmp	.+4      	; 0x18c8 <Adjustment+0x366>
			}
		}
	}
	else decHourFlag = 0;
    18c4:	10 92 70 00 	sts	0x0070, r1

	// Minutes increment
	if (!(PINB & (1<<4)))
    18c8:	e6 e3       	ldi	r30, 0x36	; 54
    18ca:	f0 e0       	ldi	r31, 0x00	; 0
    18cc:	80 81       	ld	r24, Z
    18ce:	88 2f       	mov	r24, r24
    18d0:	90 e0       	ldi	r25, 0x00	; 0
    18d2:	80 71       	andi	r24, 0x10	; 16
    18d4:	90 70       	andi	r25, 0x00	; 0
    18d6:	00 97       	sbiw	r24, 0x00	; 0
    18d8:	09 f0       	breq	.+2      	; 0x18dc <Adjustment+0x37a>
    18da:	9b c0       	rjmp	.+310    	; 0x1a12 <Adjustment+0x4b0>
    18dc:	80 e0       	ldi	r24, 0x00	; 0
    18de:	90 e0       	ldi	r25, 0x00	; 0
    18e0:	a0 ef       	ldi	r26, 0xF0	; 240
    18e2:	b1 e4       	ldi	r27, 0x41	; 65
    18e4:	8d ab       	std	Y+53, r24	; 0x35
    18e6:	9e ab       	std	Y+54, r25	; 0x36
    18e8:	af ab       	std	Y+55, r26	; 0x37
    18ea:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    18ec:	6d a9       	ldd	r22, Y+53	; 0x35
    18ee:	7e a9       	ldd	r23, Y+54	; 0x36
    18f0:	8f a9       	ldd	r24, Y+55	; 0x37
    18f2:	98 ad       	ldd	r25, Y+56	; 0x38
    18f4:	20 e0       	ldi	r18, 0x00	; 0
    18f6:	30 e0       	ldi	r19, 0x00	; 0
    18f8:	4a e7       	ldi	r20, 0x7A	; 122
    18fa:	55 e4       	ldi	r21, 0x45	; 69
    18fc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1900:	dc 01       	movw	r26, r24
    1902:	cb 01       	movw	r24, r22
    1904:	89 ab       	std	Y+49, r24	; 0x31
    1906:	9a ab       	std	Y+50, r25	; 0x32
    1908:	ab ab       	std	Y+51, r26	; 0x33
    190a:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    190c:	69 a9       	ldd	r22, Y+49	; 0x31
    190e:	7a a9       	ldd	r23, Y+50	; 0x32
    1910:	8b a9       	ldd	r24, Y+51	; 0x33
    1912:	9c a9       	ldd	r25, Y+52	; 0x34
    1914:	20 e0       	ldi	r18, 0x00	; 0
    1916:	30 e0       	ldi	r19, 0x00	; 0
    1918:	40 e8       	ldi	r20, 0x80	; 128
    191a:	5f e3       	ldi	r21, 0x3F	; 63
    191c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1920:	88 23       	and	r24, r24
    1922:	2c f4       	brge	.+10     	; 0x192e <Adjustment+0x3cc>
		__ticks = 1;
    1924:	81 e0       	ldi	r24, 0x01	; 1
    1926:	90 e0       	ldi	r25, 0x00	; 0
    1928:	98 ab       	std	Y+48, r25	; 0x30
    192a:	8f a7       	std	Y+47, r24	; 0x2f
    192c:	3f c0       	rjmp	.+126    	; 0x19ac <Adjustment+0x44a>
	else if (__tmp > 65535)
    192e:	69 a9       	ldd	r22, Y+49	; 0x31
    1930:	7a a9       	ldd	r23, Y+50	; 0x32
    1932:	8b a9       	ldd	r24, Y+51	; 0x33
    1934:	9c a9       	ldd	r25, Y+52	; 0x34
    1936:	20 e0       	ldi	r18, 0x00	; 0
    1938:	3f ef       	ldi	r19, 0xFF	; 255
    193a:	4f e7       	ldi	r20, 0x7F	; 127
    193c:	57 e4       	ldi	r21, 0x47	; 71
    193e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1942:	18 16       	cp	r1, r24
    1944:	4c f5       	brge	.+82     	; 0x1998 <Adjustment+0x436>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1946:	6d a9       	ldd	r22, Y+53	; 0x35
    1948:	7e a9       	ldd	r23, Y+54	; 0x36
    194a:	8f a9       	ldd	r24, Y+55	; 0x37
    194c:	98 ad       	ldd	r25, Y+56	; 0x38
    194e:	20 e0       	ldi	r18, 0x00	; 0
    1950:	30 e0       	ldi	r19, 0x00	; 0
    1952:	40 e2       	ldi	r20, 0x20	; 32
    1954:	51 e4       	ldi	r21, 0x41	; 65
    1956:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    195a:	dc 01       	movw	r26, r24
    195c:	cb 01       	movw	r24, r22
    195e:	bc 01       	movw	r22, r24
    1960:	cd 01       	movw	r24, r26
    1962:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1966:	dc 01       	movw	r26, r24
    1968:	cb 01       	movw	r24, r22
    196a:	98 ab       	std	Y+48, r25	; 0x30
    196c:	8f a7       	std	Y+47, r24	; 0x2f
    196e:	0f c0       	rjmp	.+30     	; 0x198e <Adjustment+0x42c>
    1970:	80 e9       	ldi	r24, 0x90	; 144
    1972:	91 e0       	ldi	r25, 0x01	; 1
    1974:	9e a7       	std	Y+46, r25	; 0x2e
    1976:	8d a7       	std	Y+45, r24	; 0x2d
    1978:	8d a5       	ldd	r24, Y+45	; 0x2d
    197a:	9e a5       	ldd	r25, Y+46	; 0x2e
    197c:	01 97       	sbiw	r24, 0x01	; 1
    197e:	f1 f7       	brne	.-4      	; 0x197c <Adjustment+0x41a>
    1980:	9e a7       	std	Y+46, r25	; 0x2e
    1982:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1984:	8f a5       	ldd	r24, Y+47	; 0x2f
    1986:	98 a9       	ldd	r25, Y+48	; 0x30
    1988:	01 97       	sbiw	r24, 0x01	; 1
    198a:	98 ab       	std	Y+48, r25	; 0x30
    198c:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    198e:	8f a5       	ldd	r24, Y+47	; 0x2f
    1990:	98 a9       	ldd	r25, Y+48	; 0x30
    1992:	00 97       	sbiw	r24, 0x00	; 0
    1994:	69 f7       	brne	.-38     	; 0x1970 <Adjustment+0x40e>
    1996:	14 c0       	rjmp	.+40     	; 0x19c0 <Adjustment+0x45e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1998:	69 a9       	ldd	r22, Y+49	; 0x31
    199a:	7a a9       	ldd	r23, Y+50	; 0x32
    199c:	8b a9       	ldd	r24, Y+51	; 0x33
    199e:	9c a9       	ldd	r25, Y+52	; 0x34
    19a0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    19a4:	dc 01       	movw	r26, r24
    19a6:	cb 01       	movw	r24, r22
    19a8:	98 ab       	std	Y+48, r25	; 0x30
    19aa:	8f a7       	std	Y+47, r24	; 0x2f
    19ac:	8f a5       	ldd	r24, Y+47	; 0x2f
    19ae:	98 a9       	ldd	r25, Y+48	; 0x30
    19b0:	9c a7       	std	Y+44, r25	; 0x2c
    19b2:	8b a7       	std	Y+43, r24	; 0x2b
    19b4:	8b a5       	ldd	r24, Y+43	; 0x2b
    19b6:	9c a5       	ldd	r25, Y+44	; 0x2c
    19b8:	01 97       	sbiw	r24, 0x01	; 1
    19ba:	f1 f7       	brne	.-4      	; 0x19b8 <Adjustment+0x456>
    19bc:	9c a7       	std	Y+44, r25	; 0x2c
    19be:	8b a7       	std	Y+43, r24	; 0x2b
	{
		_delay_ms(30);
		if (!(PINB & (1<<4)))
    19c0:	e6 e3       	ldi	r30, 0x36	; 54
    19c2:	f0 e0       	ldi	r31, 0x00	; 0
    19c4:	80 81       	ld	r24, Z
    19c6:	88 2f       	mov	r24, r24
    19c8:	90 e0       	ldi	r25, 0x00	; 0
    19ca:	80 71       	andi	r24, 0x10	; 16
    19cc:	90 70       	andi	r25, 0x00	; 0
    19ce:	00 97       	sbiw	r24, 0x00	; 0
    19d0:	11 f5       	brne	.+68     	; 0x1a16 <Adjustment+0x4b4>
		{
			if(incMinFlag == 0)
    19d2:	80 91 71 00 	lds	r24, 0x0071
    19d6:	88 23       	and	r24, r24
    19d8:	f1 f4       	brne	.+60     	; 0x1a16 <Adjustment+0x4b4>
			{
			INCREMENT_TIME(least_min, most_min, 9, 5);
    19da:	80 91 6c 00 	lds	r24, 0x006C
    19de:	89 30       	cpi	r24, 0x09	; 9
    19e0:	79 f4       	brne	.+30     	; 0x1a00 <Adjustment+0x49e>
    19e2:	10 92 6c 00 	sts	0x006C, r1
    19e6:	80 91 6b 00 	lds	r24, 0x006B
    19ea:	85 30       	cpi	r24, 0x05	; 5
    19ec:	19 f4       	brne	.+6      	; 0x19f4 <Adjustment+0x492>
    19ee:	10 92 6b 00 	sts	0x006B, r1
    19f2:	0b c0       	rjmp	.+22     	; 0x1a0a <Adjustment+0x4a8>
    19f4:	80 91 6b 00 	lds	r24, 0x006B
    19f8:	8f 5f       	subi	r24, 0xFF	; 255
    19fa:	80 93 6b 00 	sts	0x006B, r24
    19fe:	05 c0       	rjmp	.+10     	; 0x1a0a <Adjustment+0x4a8>
    1a00:	80 91 6c 00 	lds	r24, 0x006C
    1a04:	8f 5f       	subi	r24, 0xFF	; 255
    1a06:	80 93 6c 00 	sts	0x006C, r24
			incMinFlag = 1;
    1a0a:	81 e0       	ldi	r24, 0x01	; 1
    1a0c:	80 93 71 00 	sts	0x0071, r24
    1a10:	02 c0       	rjmp	.+4      	; 0x1a16 <Adjustment+0x4b4>
			}
		}
	}
	else incMinFlag = 0;
    1a12:	10 92 71 00 	sts	0x0071, r1

	// Minutes decrement
	if (!(PINB & (1<<3)))
    1a16:	e6 e3       	ldi	r30, 0x36	; 54
    1a18:	f0 e0       	ldi	r31, 0x00	; 0
    1a1a:	80 81       	ld	r24, Z
    1a1c:	88 2f       	mov	r24, r24
    1a1e:	90 e0       	ldi	r25, 0x00	; 0
    1a20:	88 70       	andi	r24, 0x08	; 8
    1a22:	90 70       	andi	r25, 0x00	; 0
    1a24:	00 97       	sbiw	r24, 0x00	; 0
    1a26:	09 f0       	breq	.+2      	; 0x1a2a <Adjustment+0x4c8>
    1a28:	9d c0       	rjmp	.+314    	; 0x1b64 <Adjustment+0x602>
    1a2a:	80 e0       	ldi	r24, 0x00	; 0
    1a2c:	90 e0       	ldi	r25, 0x00	; 0
    1a2e:	a0 ef       	ldi	r26, 0xF0	; 240
    1a30:	b1 e4       	ldi	r27, 0x41	; 65
    1a32:	8f a3       	std	Y+39, r24	; 0x27
    1a34:	98 a7       	std	Y+40, r25	; 0x28
    1a36:	a9 a7       	std	Y+41, r26	; 0x29
    1a38:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1a3a:	6f a1       	ldd	r22, Y+39	; 0x27
    1a3c:	78 a5       	ldd	r23, Y+40	; 0x28
    1a3e:	89 a5       	ldd	r24, Y+41	; 0x29
    1a40:	9a a5       	ldd	r25, Y+42	; 0x2a
    1a42:	20 e0       	ldi	r18, 0x00	; 0
    1a44:	30 e0       	ldi	r19, 0x00	; 0
    1a46:	4a e7       	ldi	r20, 0x7A	; 122
    1a48:	55 e4       	ldi	r21, 0x45	; 69
    1a4a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a4e:	dc 01       	movw	r26, r24
    1a50:	cb 01       	movw	r24, r22
    1a52:	8b a3       	std	Y+35, r24	; 0x23
    1a54:	9c a3       	std	Y+36, r25	; 0x24
    1a56:	ad a3       	std	Y+37, r26	; 0x25
    1a58:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1a5a:	6b a1       	ldd	r22, Y+35	; 0x23
    1a5c:	7c a1       	ldd	r23, Y+36	; 0x24
    1a5e:	8d a1       	ldd	r24, Y+37	; 0x25
    1a60:	9e a1       	ldd	r25, Y+38	; 0x26
    1a62:	20 e0       	ldi	r18, 0x00	; 0
    1a64:	30 e0       	ldi	r19, 0x00	; 0
    1a66:	40 e8       	ldi	r20, 0x80	; 128
    1a68:	5f e3       	ldi	r21, 0x3F	; 63
    1a6a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1a6e:	88 23       	and	r24, r24
    1a70:	2c f4       	brge	.+10     	; 0x1a7c <Adjustment+0x51a>
		__ticks = 1;
    1a72:	81 e0       	ldi	r24, 0x01	; 1
    1a74:	90 e0       	ldi	r25, 0x00	; 0
    1a76:	9a a3       	std	Y+34, r25	; 0x22
    1a78:	89 a3       	std	Y+33, r24	; 0x21
    1a7a:	3f c0       	rjmp	.+126    	; 0x1afa <Adjustment+0x598>
	else if (__tmp > 65535)
    1a7c:	6b a1       	ldd	r22, Y+35	; 0x23
    1a7e:	7c a1       	ldd	r23, Y+36	; 0x24
    1a80:	8d a1       	ldd	r24, Y+37	; 0x25
    1a82:	9e a1       	ldd	r25, Y+38	; 0x26
    1a84:	20 e0       	ldi	r18, 0x00	; 0
    1a86:	3f ef       	ldi	r19, 0xFF	; 255
    1a88:	4f e7       	ldi	r20, 0x7F	; 127
    1a8a:	57 e4       	ldi	r21, 0x47	; 71
    1a8c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1a90:	18 16       	cp	r1, r24
    1a92:	4c f5       	brge	.+82     	; 0x1ae6 <Adjustment+0x584>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1a94:	6f a1       	ldd	r22, Y+39	; 0x27
    1a96:	78 a5       	ldd	r23, Y+40	; 0x28
    1a98:	89 a5       	ldd	r24, Y+41	; 0x29
    1a9a:	9a a5       	ldd	r25, Y+42	; 0x2a
    1a9c:	20 e0       	ldi	r18, 0x00	; 0
    1a9e:	30 e0       	ldi	r19, 0x00	; 0
    1aa0:	40 e2       	ldi	r20, 0x20	; 32
    1aa2:	51 e4       	ldi	r21, 0x41	; 65
    1aa4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1aa8:	dc 01       	movw	r26, r24
    1aaa:	cb 01       	movw	r24, r22
    1aac:	bc 01       	movw	r22, r24
    1aae:	cd 01       	movw	r24, r26
    1ab0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ab4:	dc 01       	movw	r26, r24
    1ab6:	cb 01       	movw	r24, r22
    1ab8:	9a a3       	std	Y+34, r25	; 0x22
    1aba:	89 a3       	std	Y+33, r24	; 0x21
    1abc:	0f c0       	rjmp	.+30     	; 0x1adc <Adjustment+0x57a>
    1abe:	80 e9       	ldi	r24, 0x90	; 144
    1ac0:	91 e0       	ldi	r25, 0x01	; 1
    1ac2:	98 a3       	std	Y+32, r25	; 0x20
    1ac4:	8f 8f       	std	Y+31, r24	; 0x1f
    1ac6:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1ac8:	98 a1       	ldd	r25, Y+32	; 0x20
    1aca:	01 97       	sbiw	r24, 0x01	; 1
    1acc:	f1 f7       	brne	.-4      	; 0x1aca <Adjustment+0x568>
    1ace:	98 a3       	std	Y+32, r25	; 0x20
    1ad0:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1ad2:	89 a1       	ldd	r24, Y+33	; 0x21
    1ad4:	9a a1       	ldd	r25, Y+34	; 0x22
    1ad6:	01 97       	sbiw	r24, 0x01	; 1
    1ad8:	9a a3       	std	Y+34, r25	; 0x22
    1ada:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1adc:	89 a1       	ldd	r24, Y+33	; 0x21
    1ade:	9a a1       	ldd	r25, Y+34	; 0x22
    1ae0:	00 97       	sbiw	r24, 0x00	; 0
    1ae2:	69 f7       	brne	.-38     	; 0x1abe <Adjustment+0x55c>
    1ae4:	14 c0       	rjmp	.+40     	; 0x1b0e <Adjustment+0x5ac>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1ae6:	6b a1       	ldd	r22, Y+35	; 0x23
    1ae8:	7c a1       	ldd	r23, Y+36	; 0x24
    1aea:	8d a1       	ldd	r24, Y+37	; 0x25
    1aec:	9e a1       	ldd	r25, Y+38	; 0x26
    1aee:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1af2:	dc 01       	movw	r26, r24
    1af4:	cb 01       	movw	r24, r22
    1af6:	9a a3       	std	Y+34, r25	; 0x22
    1af8:	89 a3       	std	Y+33, r24	; 0x21
    1afa:	89 a1       	ldd	r24, Y+33	; 0x21
    1afc:	9a a1       	ldd	r25, Y+34	; 0x22
    1afe:	9e 8f       	std	Y+30, r25	; 0x1e
    1b00:	8d 8f       	std	Y+29, r24	; 0x1d
    1b02:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1b04:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1b06:	01 97       	sbiw	r24, 0x01	; 1
    1b08:	f1 f7       	brne	.-4      	; 0x1b06 <Adjustment+0x5a4>
    1b0a:	9e 8f       	std	Y+30, r25	; 0x1e
    1b0c:	8d 8f       	std	Y+29, r24	; 0x1d
	{
		_delay_ms(30);
		if (!(PINB & (1<<3)))
    1b0e:	e6 e3       	ldi	r30, 0x36	; 54
    1b10:	f0 e0       	ldi	r31, 0x00	; 0
    1b12:	80 81       	ld	r24, Z
    1b14:	88 2f       	mov	r24, r24
    1b16:	90 e0       	ldi	r25, 0x00	; 0
    1b18:	88 70       	andi	r24, 0x08	; 8
    1b1a:	90 70       	andi	r25, 0x00	; 0
    1b1c:	00 97       	sbiw	r24, 0x00	; 0
    1b1e:	21 f5       	brne	.+72     	; 0x1b68 <Adjustment+0x606>
		{
			if(decMinFlag == 0)
    1b20:	80 91 72 00 	lds	r24, 0x0072
    1b24:	88 23       	and	r24, r24
    1b26:	01 f5       	brne	.+64     	; 0x1b68 <Adjustment+0x606>
			{
			DECREMENT_TIME(least_min, most_min, 9, 5);
    1b28:	80 91 6c 00 	lds	r24, 0x006C
    1b2c:	88 23       	and	r24, r24
    1b2e:	89 f4       	brne	.+34     	; 0x1b52 <Adjustment+0x5f0>
    1b30:	89 e0       	ldi	r24, 0x09	; 9
    1b32:	80 93 6c 00 	sts	0x006C, r24
    1b36:	80 91 6b 00 	lds	r24, 0x006B
    1b3a:	88 23       	and	r24, r24
    1b3c:	21 f4       	brne	.+8      	; 0x1b46 <Adjustment+0x5e4>
    1b3e:	85 e0       	ldi	r24, 0x05	; 5
    1b40:	80 93 6b 00 	sts	0x006B, r24
    1b44:	0b c0       	rjmp	.+22     	; 0x1b5c <Adjustment+0x5fa>
    1b46:	80 91 6b 00 	lds	r24, 0x006B
    1b4a:	81 50       	subi	r24, 0x01	; 1
    1b4c:	80 93 6b 00 	sts	0x006B, r24
    1b50:	05 c0       	rjmp	.+10     	; 0x1b5c <Adjustment+0x5fa>
    1b52:	80 91 6c 00 	lds	r24, 0x006C
    1b56:	81 50       	subi	r24, 0x01	; 1
    1b58:	80 93 6c 00 	sts	0x006C, r24
			decMinFlag = 1;
    1b5c:	81 e0       	ldi	r24, 0x01	; 1
    1b5e:	80 93 72 00 	sts	0x0072, r24
    1b62:	02 c0       	rjmp	.+4      	; 0x1b68 <Adjustment+0x606>
			}
		}
	}
	else decMinFlag = 0;
    1b64:	10 92 72 00 	sts	0x0072, r1

	// Seconds increment
	if (!(PINB & (1<<6)))
    1b68:	e6 e3       	ldi	r30, 0x36	; 54
    1b6a:	f0 e0       	ldi	r31, 0x00	; 0
    1b6c:	80 81       	ld	r24, Z
    1b6e:	88 2f       	mov	r24, r24
    1b70:	90 e0       	ldi	r25, 0x00	; 0
    1b72:	80 74       	andi	r24, 0x40	; 64
    1b74:	90 70       	andi	r25, 0x00	; 0
    1b76:	00 97       	sbiw	r24, 0x00	; 0
    1b78:	09 f0       	breq	.+2      	; 0x1b7c <Adjustment+0x61a>
    1b7a:	9b c0       	rjmp	.+310    	; 0x1cb2 <Adjustment+0x750>
    1b7c:	80 e0       	ldi	r24, 0x00	; 0
    1b7e:	90 e0       	ldi	r25, 0x00	; 0
    1b80:	a0 ef       	ldi	r26, 0xF0	; 240
    1b82:	b1 e4       	ldi	r27, 0x41	; 65
    1b84:	89 8f       	std	Y+25, r24	; 0x19
    1b86:	9a 8f       	std	Y+26, r25	; 0x1a
    1b88:	ab 8f       	std	Y+27, r26	; 0x1b
    1b8a:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1b8c:	69 8d       	ldd	r22, Y+25	; 0x19
    1b8e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1b90:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1b92:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1b94:	20 e0       	ldi	r18, 0x00	; 0
    1b96:	30 e0       	ldi	r19, 0x00	; 0
    1b98:	4a e7       	ldi	r20, 0x7A	; 122
    1b9a:	55 e4       	ldi	r21, 0x45	; 69
    1b9c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ba0:	dc 01       	movw	r26, r24
    1ba2:	cb 01       	movw	r24, r22
    1ba4:	8d 8b       	std	Y+21, r24	; 0x15
    1ba6:	9e 8b       	std	Y+22, r25	; 0x16
    1ba8:	af 8b       	std	Y+23, r26	; 0x17
    1baa:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1bac:	6d 89       	ldd	r22, Y+21	; 0x15
    1bae:	7e 89       	ldd	r23, Y+22	; 0x16
    1bb0:	8f 89       	ldd	r24, Y+23	; 0x17
    1bb2:	98 8d       	ldd	r25, Y+24	; 0x18
    1bb4:	20 e0       	ldi	r18, 0x00	; 0
    1bb6:	30 e0       	ldi	r19, 0x00	; 0
    1bb8:	40 e8       	ldi	r20, 0x80	; 128
    1bba:	5f e3       	ldi	r21, 0x3F	; 63
    1bbc:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1bc0:	88 23       	and	r24, r24
    1bc2:	2c f4       	brge	.+10     	; 0x1bce <Adjustment+0x66c>
		__ticks = 1;
    1bc4:	81 e0       	ldi	r24, 0x01	; 1
    1bc6:	90 e0       	ldi	r25, 0x00	; 0
    1bc8:	9c 8b       	std	Y+20, r25	; 0x14
    1bca:	8b 8b       	std	Y+19, r24	; 0x13
    1bcc:	3f c0       	rjmp	.+126    	; 0x1c4c <Adjustment+0x6ea>
	else if (__tmp > 65535)
    1bce:	6d 89       	ldd	r22, Y+21	; 0x15
    1bd0:	7e 89       	ldd	r23, Y+22	; 0x16
    1bd2:	8f 89       	ldd	r24, Y+23	; 0x17
    1bd4:	98 8d       	ldd	r25, Y+24	; 0x18
    1bd6:	20 e0       	ldi	r18, 0x00	; 0
    1bd8:	3f ef       	ldi	r19, 0xFF	; 255
    1bda:	4f e7       	ldi	r20, 0x7F	; 127
    1bdc:	57 e4       	ldi	r21, 0x47	; 71
    1bde:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1be2:	18 16       	cp	r1, r24
    1be4:	4c f5       	brge	.+82     	; 0x1c38 <Adjustment+0x6d6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1be6:	69 8d       	ldd	r22, Y+25	; 0x19
    1be8:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1bea:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1bec:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1bee:	20 e0       	ldi	r18, 0x00	; 0
    1bf0:	30 e0       	ldi	r19, 0x00	; 0
    1bf2:	40 e2       	ldi	r20, 0x20	; 32
    1bf4:	51 e4       	ldi	r21, 0x41	; 65
    1bf6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1bfa:	dc 01       	movw	r26, r24
    1bfc:	cb 01       	movw	r24, r22
    1bfe:	bc 01       	movw	r22, r24
    1c00:	cd 01       	movw	r24, r26
    1c02:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c06:	dc 01       	movw	r26, r24
    1c08:	cb 01       	movw	r24, r22
    1c0a:	9c 8b       	std	Y+20, r25	; 0x14
    1c0c:	8b 8b       	std	Y+19, r24	; 0x13
    1c0e:	0f c0       	rjmp	.+30     	; 0x1c2e <Adjustment+0x6cc>
    1c10:	80 e9       	ldi	r24, 0x90	; 144
    1c12:	91 e0       	ldi	r25, 0x01	; 1
    1c14:	9a 8b       	std	Y+18, r25	; 0x12
    1c16:	89 8b       	std	Y+17, r24	; 0x11
    1c18:	89 89       	ldd	r24, Y+17	; 0x11
    1c1a:	9a 89       	ldd	r25, Y+18	; 0x12
    1c1c:	01 97       	sbiw	r24, 0x01	; 1
    1c1e:	f1 f7       	brne	.-4      	; 0x1c1c <Adjustment+0x6ba>
    1c20:	9a 8b       	std	Y+18, r25	; 0x12
    1c22:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1c24:	8b 89       	ldd	r24, Y+19	; 0x13
    1c26:	9c 89       	ldd	r25, Y+20	; 0x14
    1c28:	01 97       	sbiw	r24, 0x01	; 1
    1c2a:	9c 8b       	std	Y+20, r25	; 0x14
    1c2c:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1c2e:	8b 89       	ldd	r24, Y+19	; 0x13
    1c30:	9c 89       	ldd	r25, Y+20	; 0x14
    1c32:	00 97       	sbiw	r24, 0x00	; 0
    1c34:	69 f7       	brne	.-38     	; 0x1c10 <Adjustment+0x6ae>
    1c36:	14 c0       	rjmp	.+40     	; 0x1c60 <Adjustment+0x6fe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1c38:	6d 89       	ldd	r22, Y+21	; 0x15
    1c3a:	7e 89       	ldd	r23, Y+22	; 0x16
    1c3c:	8f 89       	ldd	r24, Y+23	; 0x17
    1c3e:	98 8d       	ldd	r25, Y+24	; 0x18
    1c40:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c44:	dc 01       	movw	r26, r24
    1c46:	cb 01       	movw	r24, r22
    1c48:	9c 8b       	std	Y+20, r25	; 0x14
    1c4a:	8b 8b       	std	Y+19, r24	; 0x13
    1c4c:	8b 89       	ldd	r24, Y+19	; 0x13
    1c4e:	9c 89       	ldd	r25, Y+20	; 0x14
    1c50:	98 8b       	std	Y+16, r25	; 0x10
    1c52:	8f 87       	std	Y+15, r24	; 0x0f
    1c54:	8f 85       	ldd	r24, Y+15	; 0x0f
    1c56:	98 89       	ldd	r25, Y+16	; 0x10
    1c58:	01 97       	sbiw	r24, 0x01	; 1
    1c5a:	f1 f7       	brne	.-4      	; 0x1c58 <Adjustment+0x6f6>
    1c5c:	98 8b       	std	Y+16, r25	; 0x10
    1c5e:	8f 87       	std	Y+15, r24	; 0x0f
	{
		_delay_ms(30);
		if (!(PINB & (1<<6)))
    1c60:	e6 e3       	ldi	r30, 0x36	; 54
    1c62:	f0 e0       	ldi	r31, 0x00	; 0
    1c64:	80 81       	ld	r24, Z
    1c66:	88 2f       	mov	r24, r24
    1c68:	90 e0       	ldi	r25, 0x00	; 0
    1c6a:	80 74       	andi	r24, 0x40	; 64
    1c6c:	90 70       	andi	r25, 0x00	; 0
    1c6e:	00 97       	sbiw	r24, 0x00	; 0
    1c70:	11 f5       	brne	.+68     	; 0x1cb6 <Adjustment+0x754>
		{
			if(incSecFlag == 0)
    1c72:	80 91 73 00 	lds	r24, 0x0073
    1c76:	88 23       	and	r24, r24
    1c78:	f1 f4       	brne	.+60     	; 0x1cb6 <Adjustment+0x754>
			{
			INCREMENT_TIME(least_sec, most_sec, 9, 5);
    1c7a:	80 91 6e 00 	lds	r24, 0x006E
    1c7e:	89 30       	cpi	r24, 0x09	; 9
    1c80:	79 f4       	brne	.+30     	; 0x1ca0 <Adjustment+0x73e>
    1c82:	10 92 6e 00 	sts	0x006E, r1
    1c86:	80 91 6d 00 	lds	r24, 0x006D
    1c8a:	85 30       	cpi	r24, 0x05	; 5
    1c8c:	19 f4       	brne	.+6      	; 0x1c94 <Adjustment+0x732>
    1c8e:	10 92 6d 00 	sts	0x006D, r1
    1c92:	0b c0       	rjmp	.+22     	; 0x1caa <Adjustment+0x748>
    1c94:	80 91 6d 00 	lds	r24, 0x006D
    1c98:	8f 5f       	subi	r24, 0xFF	; 255
    1c9a:	80 93 6d 00 	sts	0x006D, r24
    1c9e:	05 c0       	rjmp	.+10     	; 0x1caa <Adjustment+0x748>
    1ca0:	80 91 6e 00 	lds	r24, 0x006E
    1ca4:	8f 5f       	subi	r24, 0xFF	; 255
    1ca6:	80 93 6e 00 	sts	0x006E, r24
			incSecFlag = 1;
    1caa:	81 e0       	ldi	r24, 0x01	; 1
    1cac:	80 93 73 00 	sts	0x0073, r24
    1cb0:	02 c0       	rjmp	.+4      	; 0x1cb6 <Adjustment+0x754>
			}
		}
	}
	else incSecFlag = 0;
    1cb2:	10 92 73 00 	sts	0x0073, r1

	// Seconds decrement
	if (!(PINB & (1<<5)))
    1cb6:	e6 e3       	ldi	r30, 0x36	; 54
    1cb8:	f0 e0       	ldi	r31, 0x00	; 0
    1cba:	80 81       	ld	r24, Z
    1cbc:	88 2f       	mov	r24, r24
    1cbe:	90 e0       	ldi	r25, 0x00	; 0
    1cc0:	80 72       	andi	r24, 0x20	; 32
    1cc2:	90 70       	andi	r25, 0x00	; 0
    1cc4:	00 97       	sbiw	r24, 0x00	; 0
    1cc6:	09 f0       	breq	.+2      	; 0x1cca <Adjustment+0x768>
    1cc8:	9d c0       	rjmp	.+314    	; 0x1e04 <Adjustment+0x8a2>
    1cca:	80 e0       	ldi	r24, 0x00	; 0
    1ccc:	90 e0       	ldi	r25, 0x00	; 0
    1cce:	a0 ef       	ldi	r26, 0xF0	; 240
    1cd0:	b1 e4       	ldi	r27, 0x41	; 65
    1cd2:	8b 87       	std	Y+11, r24	; 0x0b
    1cd4:	9c 87       	std	Y+12, r25	; 0x0c
    1cd6:	ad 87       	std	Y+13, r26	; 0x0d
    1cd8:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1cda:	6b 85       	ldd	r22, Y+11	; 0x0b
    1cdc:	7c 85       	ldd	r23, Y+12	; 0x0c
    1cde:	8d 85       	ldd	r24, Y+13	; 0x0d
    1ce0:	9e 85       	ldd	r25, Y+14	; 0x0e
    1ce2:	20 e0       	ldi	r18, 0x00	; 0
    1ce4:	30 e0       	ldi	r19, 0x00	; 0
    1ce6:	4a e7       	ldi	r20, 0x7A	; 122
    1ce8:	55 e4       	ldi	r21, 0x45	; 69
    1cea:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1cee:	dc 01       	movw	r26, r24
    1cf0:	cb 01       	movw	r24, r22
    1cf2:	8f 83       	std	Y+7, r24	; 0x07
    1cf4:	98 87       	std	Y+8, r25	; 0x08
    1cf6:	a9 87       	std	Y+9, r26	; 0x09
    1cf8:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1cfa:	6f 81       	ldd	r22, Y+7	; 0x07
    1cfc:	78 85       	ldd	r23, Y+8	; 0x08
    1cfe:	89 85       	ldd	r24, Y+9	; 0x09
    1d00:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d02:	20 e0       	ldi	r18, 0x00	; 0
    1d04:	30 e0       	ldi	r19, 0x00	; 0
    1d06:	40 e8       	ldi	r20, 0x80	; 128
    1d08:	5f e3       	ldi	r21, 0x3F	; 63
    1d0a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1d0e:	88 23       	and	r24, r24
    1d10:	2c f4       	brge	.+10     	; 0x1d1c <Adjustment+0x7ba>
		__ticks = 1;
    1d12:	81 e0       	ldi	r24, 0x01	; 1
    1d14:	90 e0       	ldi	r25, 0x00	; 0
    1d16:	9e 83       	std	Y+6, r25	; 0x06
    1d18:	8d 83       	std	Y+5, r24	; 0x05
    1d1a:	3f c0       	rjmp	.+126    	; 0x1d9a <Adjustment+0x838>
	else if (__tmp > 65535)
    1d1c:	6f 81       	ldd	r22, Y+7	; 0x07
    1d1e:	78 85       	ldd	r23, Y+8	; 0x08
    1d20:	89 85       	ldd	r24, Y+9	; 0x09
    1d22:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d24:	20 e0       	ldi	r18, 0x00	; 0
    1d26:	3f ef       	ldi	r19, 0xFF	; 255
    1d28:	4f e7       	ldi	r20, 0x7F	; 127
    1d2a:	57 e4       	ldi	r21, 0x47	; 71
    1d2c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1d30:	18 16       	cp	r1, r24
    1d32:	4c f5       	brge	.+82     	; 0x1d86 <Adjustment+0x824>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1d34:	6b 85       	ldd	r22, Y+11	; 0x0b
    1d36:	7c 85       	ldd	r23, Y+12	; 0x0c
    1d38:	8d 85       	ldd	r24, Y+13	; 0x0d
    1d3a:	9e 85       	ldd	r25, Y+14	; 0x0e
    1d3c:	20 e0       	ldi	r18, 0x00	; 0
    1d3e:	30 e0       	ldi	r19, 0x00	; 0
    1d40:	40 e2       	ldi	r20, 0x20	; 32
    1d42:	51 e4       	ldi	r21, 0x41	; 65
    1d44:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d48:	dc 01       	movw	r26, r24
    1d4a:	cb 01       	movw	r24, r22
    1d4c:	bc 01       	movw	r22, r24
    1d4e:	cd 01       	movw	r24, r26
    1d50:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d54:	dc 01       	movw	r26, r24
    1d56:	cb 01       	movw	r24, r22
    1d58:	9e 83       	std	Y+6, r25	; 0x06
    1d5a:	8d 83       	std	Y+5, r24	; 0x05
    1d5c:	0f c0       	rjmp	.+30     	; 0x1d7c <Adjustment+0x81a>
    1d5e:	80 e9       	ldi	r24, 0x90	; 144
    1d60:	91 e0       	ldi	r25, 0x01	; 1
    1d62:	9c 83       	std	Y+4, r25	; 0x04
    1d64:	8b 83       	std	Y+3, r24	; 0x03
    1d66:	8b 81       	ldd	r24, Y+3	; 0x03
    1d68:	9c 81       	ldd	r25, Y+4	; 0x04
    1d6a:	01 97       	sbiw	r24, 0x01	; 1
    1d6c:	f1 f7       	brne	.-4      	; 0x1d6a <Adjustment+0x808>
    1d6e:	9c 83       	std	Y+4, r25	; 0x04
    1d70:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1d72:	8d 81       	ldd	r24, Y+5	; 0x05
    1d74:	9e 81       	ldd	r25, Y+6	; 0x06
    1d76:	01 97       	sbiw	r24, 0x01	; 1
    1d78:	9e 83       	std	Y+6, r25	; 0x06
    1d7a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d7c:	8d 81       	ldd	r24, Y+5	; 0x05
    1d7e:	9e 81       	ldd	r25, Y+6	; 0x06
    1d80:	00 97       	sbiw	r24, 0x00	; 0
    1d82:	69 f7       	brne	.-38     	; 0x1d5e <Adjustment+0x7fc>
    1d84:	14 c0       	rjmp	.+40     	; 0x1dae <Adjustment+0x84c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1d86:	6f 81       	ldd	r22, Y+7	; 0x07
    1d88:	78 85       	ldd	r23, Y+8	; 0x08
    1d8a:	89 85       	ldd	r24, Y+9	; 0x09
    1d8c:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d8e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d92:	dc 01       	movw	r26, r24
    1d94:	cb 01       	movw	r24, r22
    1d96:	9e 83       	std	Y+6, r25	; 0x06
    1d98:	8d 83       	std	Y+5, r24	; 0x05
    1d9a:	8d 81       	ldd	r24, Y+5	; 0x05
    1d9c:	9e 81       	ldd	r25, Y+6	; 0x06
    1d9e:	9a 83       	std	Y+2, r25	; 0x02
    1da0:	89 83       	std	Y+1, r24	; 0x01
    1da2:	89 81       	ldd	r24, Y+1	; 0x01
    1da4:	9a 81       	ldd	r25, Y+2	; 0x02
    1da6:	01 97       	sbiw	r24, 0x01	; 1
    1da8:	f1 f7       	brne	.-4      	; 0x1da6 <Adjustment+0x844>
    1daa:	9a 83       	std	Y+2, r25	; 0x02
    1dac:	89 83       	std	Y+1, r24	; 0x01
	{
		_delay_ms(30);
		if (!(PINB & (1<<5)))
    1dae:	e6 e3       	ldi	r30, 0x36	; 54
    1db0:	f0 e0       	ldi	r31, 0x00	; 0
    1db2:	80 81       	ld	r24, Z
    1db4:	88 2f       	mov	r24, r24
    1db6:	90 e0       	ldi	r25, 0x00	; 0
    1db8:	80 72       	andi	r24, 0x20	; 32
    1dba:	90 70       	andi	r25, 0x00	; 0
    1dbc:	00 97       	sbiw	r24, 0x00	; 0
    1dbe:	21 f5       	brne	.+72     	; 0x1e08 <Adjustment+0x8a6>
		{
			if(decSecFlag == 0)
    1dc0:	80 91 74 00 	lds	r24, 0x0074
    1dc4:	88 23       	and	r24, r24
    1dc6:	01 f5       	brne	.+64     	; 0x1e08 <Adjustment+0x8a6>
			{
			DECREMENT_TIME(least_sec, most_sec, 9, 5);
    1dc8:	80 91 6e 00 	lds	r24, 0x006E
    1dcc:	88 23       	and	r24, r24
    1dce:	89 f4       	brne	.+34     	; 0x1df2 <Adjustment+0x890>
    1dd0:	89 e0       	ldi	r24, 0x09	; 9
    1dd2:	80 93 6e 00 	sts	0x006E, r24
    1dd6:	80 91 6d 00 	lds	r24, 0x006D
    1dda:	88 23       	and	r24, r24
    1ddc:	21 f4       	brne	.+8      	; 0x1de6 <Adjustment+0x884>
    1dde:	85 e0       	ldi	r24, 0x05	; 5
    1de0:	80 93 6d 00 	sts	0x006D, r24
    1de4:	0b c0       	rjmp	.+22     	; 0x1dfc <Adjustment+0x89a>
    1de6:	80 91 6d 00 	lds	r24, 0x006D
    1dea:	81 50       	subi	r24, 0x01	; 1
    1dec:	80 93 6d 00 	sts	0x006D, r24
    1df0:	05 c0       	rjmp	.+10     	; 0x1dfc <Adjustment+0x89a>
    1df2:	80 91 6e 00 	lds	r24, 0x006E
    1df6:	81 50       	subi	r24, 0x01	; 1
    1df8:	80 93 6e 00 	sts	0x006E, r24
			decSecFlag = 1;
    1dfc:	81 e0       	ldi	r24, 0x01	; 1
    1dfe:	80 93 74 00 	sts	0x0074, r24
    1e02:	02 c0       	rjmp	.+4      	; 0x1e08 <Adjustment+0x8a6>
			}
		}
	}
	else decSecFlag = 0;
    1e04:	10 92 74 00 	sts	0x0074, r1

	// Update 7-segment displays
	display(least_sec, most_sec, least_min, most_min, least_hour, most_hour);
    1e08:	80 91 6e 00 	lds	r24, 0x006E
    1e0c:	90 91 6d 00 	lds	r25, 0x006D
    1e10:	20 91 6c 00 	lds	r18, 0x006C
    1e14:	30 91 6b 00 	lds	r19, 0x006B
    1e18:	50 91 6a 00 	lds	r21, 0x006A
    1e1c:	70 91 69 00 	lds	r23, 0x0069
    1e20:	69 2f       	mov	r22, r25
    1e22:	42 2f       	mov	r20, r18
    1e24:	23 2f       	mov	r18, r19
    1e26:	05 2f       	mov	r16, r21
    1e28:	e7 2e       	mov	r14, r23
    1e2a:	0e 94 5f 06 	call	0xcbe	; 0xcbe <display>
}
    1e2e:	cc 5a       	subi	r28, 0xAC	; 172
    1e30:	df 4f       	sbci	r29, 0xFF	; 255
    1e32:	0f b6       	in	r0, 0x3f	; 63
    1e34:	f8 94       	cli
    1e36:	de bf       	out	0x3e, r29	; 62
    1e38:	0f be       	out	0x3f, r0	; 63
    1e3a:	cd bf       	out	0x3d, r28	; 61
    1e3c:	cf 91       	pop	r28
    1e3e:	df 91       	pop	r29
    1e40:	1f 91       	pop	r17
    1e42:	0f 91       	pop	r16
    1e44:	ef 90       	pop	r14
    1e46:	08 95       	ret

00001e48 <__vector_1>:

ISR(INT0_vect)    /* Reset the stop-watch */
{
    1e48:	1f 92       	push	r1
    1e4a:	0f 92       	push	r0
    1e4c:	0f b6       	in	r0, 0x3f	; 63
    1e4e:	0f 92       	push	r0
    1e50:	11 24       	eor	r1, r1
    1e52:	ef 92       	push	r14
    1e54:	0f 93       	push	r16
    1e56:	2f 93       	push	r18
    1e58:	3f 93       	push	r19
    1e5a:	4f 93       	push	r20
    1e5c:	5f 93       	push	r21
    1e5e:	6f 93       	push	r22
    1e60:	7f 93       	push	r23
    1e62:	8f 93       	push	r24
    1e64:	9f 93       	push	r25
    1e66:	af 93       	push	r26
    1e68:	bf 93       	push	r27
    1e6a:	ef 93       	push	r30
    1e6c:	ff 93       	push	r31
    1e6e:	df 93       	push	r29
    1e70:	cf 93       	push	r28
    1e72:	cd b7       	in	r28, 0x3d	; 61
    1e74:	de b7       	in	r29, 0x3e	; 62
	TCNT1=0;
    1e76:	ec e4       	ldi	r30, 0x4C	; 76
    1e78:	f0 e0       	ldi	r31, 0x00	; 0
    1e7a:	11 82       	std	Z+1, r1	; 0x01
    1e7c:	10 82       	st	Z, r1
	least_sec=0,most_sec=0;
    1e7e:	10 92 6e 00 	sts	0x006E, r1
    1e82:	10 92 6d 00 	sts	0x006D, r1
	least_min=0,most_min=0;
    1e86:	10 92 6c 00 	sts	0x006C, r1
    1e8a:	10 92 6b 00 	sts	0x006B, r1
	least_hour=0,most_hour=0;
    1e8e:	10 92 6a 00 	sts	0x006A, r1
    1e92:	10 92 69 00 	sts	0x0069, r1
	/* Update 7-segment displays */
	display(least_sec, most_sec, least_min, most_min, least_hour, most_hour);
    1e96:	80 91 6e 00 	lds	r24, 0x006E
    1e9a:	90 91 6d 00 	lds	r25, 0x006D
    1e9e:	20 91 6c 00 	lds	r18, 0x006C
    1ea2:	30 91 6b 00 	lds	r19, 0x006B
    1ea6:	50 91 6a 00 	lds	r21, 0x006A
    1eaa:	70 91 69 00 	lds	r23, 0x0069
    1eae:	69 2f       	mov	r22, r25
    1eb0:	42 2f       	mov	r20, r18
    1eb2:	23 2f       	mov	r18, r19
    1eb4:	05 2f       	mov	r16, r21
    1eb6:	e7 2e       	mov	r14, r23
    1eb8:	0e 94 5f 06 	call	0xcbe	; 0xcbe <display>
}
    1ebc:	cf 91       	pop	r28
    1ebe:	df 91       	pop	r29
    1ec0:	ff 91       	pop	r31
    1ec2:	ef 91       	pop	r30
    1ec4:	bf 91       	pop	r27
    1ec6:	af 91       	pop	r26
    1ec8:	9f 91       	pop	r25
    1eca:	8f 91       	pop	r24
    1ecc:	7f 91       	pop	r23
    1ece:	6f 91       	pop	r22
    1ed0:	5f 91       	pop	r21
    1ed2:	4f 91       	pop	r20
    1ed4:	3f 91       	pop	r19
    1ed6:	2f 91       	pop	r18
    1ed8:	0f 91       	pop	r16
    1eda:	ef 90       	pop	r14
    1edc:	0f 90       	pop	r0
    1ede:	0f be       	out	0x3f, r0	; 63
    1ee0:	0f 90       	pop	r0
    1ee2:	1f 90       	pop	r1
    1ee4:	18 95       	reti

00001ee6 <__vector_2>:

ISR(INT1_vect)    /* Pause TIMER1 */
{
    1ee6:	1f 92       	push	r1
    1ee8:	0f 92       	push	r0
    1eea:	0f b6       	in	r0, 0x3f	; 63
    1eec:	0f 92       	push	r0
    1eee:	11 24       	eor	r1, r1
    1ef0:	8f 93       	push	r24
    1ef2:	ef 93       	push	r30
    1ef4:	ff 93       	push	r31
    1ef6:	df 93       	push	r29
    1ef8:	cf 93       	push	r28
    1efa:	0f 92       	push	r0
    1efc:	cd b7       	in	r28, 0x3d	; 61
    1efe:	de b7       	in	r29, 0x3e	; 62
	TCCR1B &= 0x00;
    1f00:	ee e4       	ldi	r30, 0x4E	; 78
    1f02:	f0 e0       	ldi	r31, 0x00	; 0
    1f04:	80 81       	ld	r24, Z
    1f06:	ee e4       	ldi	r30, 0x4E	; 78
    1f08:	f0 e0       	ldi	r31, 0x00	; 0
    1f0a:	10 82       	st	Z, r1
}
    1f0c:	0f 90       	pop	r0
    1f0e:	cf 91       	pop	r28
    1f10:	df 91       	pop	r29
    1f12:	ff 91       	pop	r31
    1f14:	ef 91       	pop	r30
    1f16:	8f 91       	pop	r24
    1f18:	0f 90       	pop	r0
    1f1a:	0f be       	out	0x3f, r0	; 63
    1f1c:	0f 90       	pop	r0
    1f1e:	1f 90       	pop	r1
    1f20:	18 95       	reti

00001f22 <__vector_3>:

ISR(INT2_vect)    /* Resume the count-down */
{
    1f22:	1f 92       	push	r1
    1f24:	0f 92       	push	r0
    1f26:	0f b6       	in	r0, 0x3f	; 63
    1f28:	0f 92       	push	r0
    1f2a:	11 24       	eor	r1, r1
    1f2c:	2f 93       	push	r18
    1f2e:	3f 93       	push	r19
    1f30:	4f 93       	push	r20
    1f32:	5f 93       	push	r21
    1f34:	6f 93       	push	r22
    1f36:	7f 93       	push	r23
    1f38:	8f 93       	push	r24
    1f3a:	9f 93       	push	r25
    1f3c:	af 93       	push	r26
    1f3e:	bf 93       	push	r27
    1f40:	ef 93       	push	r30
    1f42:	ff 93       	push	r31
    1f44:	df 93       	push	r29
    1f46:	cf 93       	push	r28
    1f48:	cd b7       	in	r28, 0x3d	; 61
    1f4a:	de b7       	in	r29, 0x3e	; 62
	Timer1_configuration();
    1f4c:	0e 94 f9 05 	call	0xbf2	; 0xbf2 <Timer1_configuration>
}
    1f50:	cf 91       	pop	r28
    1f52:	df 91       	pop	r29
    1f54:	ff 91       	pop	r31
    1f56:	ef 91       	pop	r30
    1f58:	bf 91       	pop	r27
    1f5a:	af 91       	pop	r26
    1f5c:	9f 91       	pop	r25
    1f5e:	8f 91       	pop	r24
    1f60:	7f 91       	pop	r23
    1f62:	6f 91       	pop	r22
    1f64:	5f 91       	pop	r21
    1f66:	4f 91       	pop	r20
    1f68:	3f 91       	pop	r19
    1f6a:	2f 91       	pop	r18
    1f6c:	0f 90       	pop	r0
    1f6e:	0f be       	out	0x3f, r0	; 63
    1f70:	0f 90       	pop	r0
    1f72:	1f 90       	pop	r1
    1f74:	18 95       	reti

00001f76 <__vector_7>:

ISR(TIMER1_COMPA_vect)
{
    1f76:	1f 92       	push	r1
    1f78:	0f 92       	push	r0
    1f7a:	0f b6       	in	r0, 0x3f	; 63
    1f7c:	0f 92       	push	r0
    1f7e:	11 24       	eor	r1, r1
    1f80:	ef 92       	push	r14
    1f82:	0f 93       	push	r16
    1f84:	2f 93       	push	r18
    1f86:	3f 93       	push	r19
    1f88:	4f 93       	push	r20
    1f8a:	5f 93       	push	r21
    1f8c:	6f 93       	push	r22
    1f8e:	7f 93       	push	r23
    1f90:	8f 93       	push	r24
    1f92:	9f 93       	push	r25
    1f94:	af 93       	push	r26
    1f96:	bf 93       	push	r27
    1f98:	ef 93       	push	r30
    1f9a:	ff 93       	push	r31
    1f9c:	df 93       	push	r29
    1f9e:	cf 93       	push	r28
    1fa0:	0f 92       	push	r0
    1fa2:	cd b7       	in	r28, 0x3d	; 61
    1fa4:	de b7       	in	r29, 0x3e	; 62
	if (modeFlag == 0)  /* Count-up mode */
    1fa6:	80 91 68 00 	lds	r24, 0x0068
    1faa:	88 23       	and	r24, r24
    1fac:	09 f0       	breq	.+2      	; 0x1fb0 <__vector_7+0x3a>
    1fae:	65 c0       	rjmp	.+202    	; 0x207a <__vector_7+0x104>
	{
		INCREMENT_TIME(least_sec, most_sec, 9, 5);  // Increment seconds
    1fb0:	80 91 6e 00 	lds	r24, 0x006E
    1fb4:	89 30       	cpi	r24, 0x09	; 9
    1fb6:	79 f4       	brne	.+30     	; 0x1fd6 <__vector_7+0x60>
    1fb8:	10 92 6e 00 	sts	0x006E, r1
    1fbc:	80 91 6d 00 	lds	r24, 0x006D
    1fc0:	85 30       	cpi	r24, 0x05	; 5
    1fc2:	19 f4       	brne	.+6      	; 0x1fca <__vector_7+0x54>
    1fc4:	10 92 6d 00 	sts	0x006D, r1
    1fc8:	0b c0       	rjmp	.+22     	; 0x1fe0 <__vector_7+0x6a>
    1fca:	80 91 6d 00 	lds	r24, 0x006D
    1fce:	8f 5f       	subi	r24, 0xFF	; 255
    1fd0:	80 93 6d 00 	sts	0x006D, r24
    1fd4:	05 c0       	rjmp	.+10     	; 0x1fe0 <__vector_7+0x6a>
    1fd6:	80 91 6e 00 	lds	r24, 0x006E
    1fda:	8f 5f       	subi	r24, 0xFF	; 255
    1fdc:	80 93 6e 00 	sts	0x006E, r24
		if (least_sec == 0 && most_sec == 0)        // Increment minutes
    1fe0:	80 91 6e 00 	lds	r24, 0x006E
    1fe4:	88 23       	and	r24, r24
    1fe6:	e1 f4       	brne	.+56     	; 0x2020 <__vector_7+0xaa>
    1fe8:	80 91 6d 00 	lds	r24, 0x006D
    1fec:	88 23       	and	r24, r24
    1fee:	c1 f4       	brne	.+48     	; 0x2020 <__vector_7+0xaa>
		{
			INCREMENT_TIME(least_min, most_min, 9, 5);
    1ff0:	80 91 6c 00 	lds	r24, 0x006C
    1ff4:	89 30       	cpi	r24, 0x09	; 9
    1ff6:	79 f4       	brne	.+30     	; 0x2016 <__vector_7+0xa0>
    1ff8:	10 92 6c 00 	sts	0x006C, r1
    1ffc:	80 91 6b 00 	lds	r24, 0x006B
    2000:	85 30       	cpi	r24, 0x05	; 5
    2002:	19 f4       	brne	.+6      	; 0x200a <__vector_7+0x94>
    2004:	10 92 6b 00 	sts	0x006B, r1
    2008:	0b c0       	rjmp	.+22     	; 0x2020 <__vector_7+0xaa>
    200a:	80 91 6b 00 	lds	r24, 0x006B
    200e:	8f 5f       	subi	r24, 0xFF	; 255
    2010:	80 93 6b 00 	sts	0x006B, r24
    2014:	05 c0       	rjmp	.+10     	; 0x2020 <__vector_7+0xaa>
    2016:	80 91 6c 00 	lds	r24, 0x006C
    201a:	8f 5f       	subi	r24, 0xFF	; 255
    201c:	80 93 6c 00 	sts	0x006C, r24
		}
		if (least_min == 0 && most_min == 0 && least_sec == 0 && most_sec == 0)  // Increment hours
    2020:	80 91 6c 00 	lds	r24, 0x006C
    2024:	88 23       	and	r24, r24
    2026:	09 f0       	breq	.+2      	; 0x202a <__vector_7+0xb4>
    2028:	b8 c0       	rjmp	.+368    	; 0x219a <__vector_7+0x224>
    202a:	80 91 6b 00 	lds	r24, 0x006B
    202e:	88 23       	and	r24, r24
    2030:	09 f0       	breq	.+2      	; 0x2034 <__vector_7+0xbe>
    2032:	b3 c0       	rjmp	.+358    	; 0x219a <__vector_7+0x224>
    2034:	80 91 6e 00 	lds	r24, 0x006E
    2038:	88 23       	and	r24, r24
    203a:	09 f0       	breq	.+2      	; 0x203e <__vector_7+0xc8>
    203c:	ae c0       	rjmp	.+348    	; 0x219a <__vector_7+0x224>
    203e:	80 91 6d 00 	lds	r24, 0x006D
    2042:	88 23       	and	r24, r24
    2044:	09 f0       	breq	.+2      	; 0x2048 <__vector_7+0xd2>
    2046:	a9 c0       	rjmp	.+338    	; 0x219a <__vector_7+0x224>
		{
			INCREMENT_TIME(least_hour, most_hour, 9, 9);
    2048:	80 91 6a 00 	lds	r24, 0x006A
    204c:	89 30       	cpi	r24, 0x09	; 9
    204e:	79 f4       	brne	.+30     	; 0x206e <__vector_7+0xf8>
    2050:	10 92 6a 00 	sts	0x006A, r1
    2054:	80 91 69 00 	lds	r24, 0x0069
    2058:	89 30       	cpi	r24, 0x09	; 9
    205a:	19 f4       	brne	.+6      	; 0x2062 <__vector_7+0xec>
    205c:	10 92 69 00 	sts	0x0069, r1
    2060:	9c c0       	rjmp	.+312    	; 0x219a <__vector_7+0x224>
    2062:	80 91 69 00 	lds	r24, 0x0069
    2066:	8f 5f       	subi	r24, 0xFF	; 255
    2068:	80 93 69 00 	sts	0x0069, r24
    206c:	96 c0       	rjmp	.+300    	; 0x219a <__vector_7+0x224>
    206e:	80 91 6a 00 	lds	r24, 0x006A
    2072:	8f 5f       	subi	r24, 0xFF	; 255
    2074:	80 93 6a 00 	sts	0x006A, r24
    2078:	90 c0       	rjmp	.+288    	; 0x219a <__vector_7+0x224>
		}
	}

	else if (modeFlag == 1)  /* Count-down mode */
    207a:	80 91 68 00 	lds	r24, 0x0068
    207e:	81 30       	cpi	r24, 0x01	; 1
    2080:	09 f0       	breq	.+2      	; 0x2084 <__vector_7+0x10e>
    2082:	8b c0       	rjmp	.+278    	; 0x219a <__vector_7+0x224>
	{
		DECREMENT_TIME(least_sec, most_sec, 9, 5);  // Decrement seconds
    2084:	80 91 6e 00 	lds	r24, 0x006E
    2088:	88 23       	and	r24, r24
    208a:	89 f4       	brne	.+34     	; 0x20ae <__vector_7+0x138>
    208c:	89 e0       	ldi	r24, 0x09	; 9
    208e:	80 93 6e 00 	sts	0x006E, r24
    2092:	80 91 6d 00 	lds	r24, 0x006D
    2096:	88 23       	and	r24, r24
    2098:	21 f4       	brne	.+8      	; 0x20a2 <__vector_7+0x12c>
    209a:	85 e0       	ldi	r24, 0x05	; 5
    209c:	80 93 6d 00 	sts	0x006D, r24
    20a0:	0b c0       	rjmp	.+22     	; 0x20b8 <__vector_7+0x142>
    20a2:	80 91 6d 00 	lds	r24, 0x006D
    20a6:	81 50       	subi	r24, 0x01	; 1
    20a8:	80 93 6d 00 	sts	0x006D, r24
    20ac:	05 c0       	rjmp	.+10     	; 0x20b8 <__vector_7+0x142>
    20ae:	80 91 6e 00 	lds	r24, 0x006E
    20b2:	81 50       	subi	r24, 0x01	; 1
    20b4:	80 93 6e 00 	sts	0x006E, r24
		if (least_sec == 9 && most_sec == 5)        // Decrement minutes
    20b8:	80 91 6e 00 	lds	r24, 0x006E
    20bc:	89 30       	cpi	r24, 0x09	; 9
    20be:	f1 f4       	brne	.+60     	; 0x20fc <__vector_7+0x186>
    20c0:	80 91 6d 00 	lds	r24, 0x006D
    20c4:	85 30       	cpi	r24, 0x05	; 5
    20c6:	d1 f4       	brne	.+52     	; 0x20fc <__vector_7+0x186>
		{
			DECREMENT_TIME(least_min, most_min, 9, 5);
    20c8:	80 91 6c 00 	lds	r24, 0x006C
    20cc:	88 23       	and	r24, r24
    20ce:	89 f4       	brne	.+34     	; 0x20f2 <__vector_7+0x17c>
    20d0:	89 e0       	ldi	r24, 0x09	; 9
    20d2:	80 93 6c 00 	sts	0x006C, r24
    20d6:	80 91 6b 00 	lds	r24, 0x006B
    20da:	88 23       	and	r24, r24
    20dc:	21 f4       	brne	.+8      	; 0x20e6 <__vector_7+0x170>
    20de:	85 e0       	ldi	r24, 0x05	; 5
    20e0:	80 93 6b 00 	sts	0x006B, r24
    20e4:	0b c0       	rjmp	.+22     	; 0x20fc <__vector_7+0x186>
    20e6:	80 91 6b 00 	lds	r24, 0x006B
    20ea:	81 50       	subi	r24, 0x01	; 1
    20ec:	80 93 6b 00 	sts	0x006B, r24
    20f0:	05 c0       	rjmp	.+10     	; 0x20fc <__vector_7+0x186>
    20f2:	80 91 6c 00 	lds	r24, 0x006C
    20f6:	81 50       	subi	r24, 0x01	; 1
    20f8:	80 93 6c 00 	sts	0x006C, r24
		}
		if (least_min == 9 && most_min == 5 && least_sec == 9 && most_sec == 5)  // Decrement hours
    20fc:	80 91 6c 00 	lds	r24, 0x006C
    2100:	89 30       	cpi	r24, 0x09	; 9
    2102:	31 f5       	brne	.+76     	; 0x2150 <__vector_7+0x1da>
    2104:	80 91 6b 00 	lds	r24, 0x006B
    2108:	85 30       	cpi	r24, 0x05	; 5
    210a:	11 f5       	brne	.+68     	; 0x2150 <__vector_7+0x1da>
    210c:	80 91 6e 00 	lds	r24, 0x006E
    2110:	89 30       	cpi	r24, 0x09	; 9
    2112:	f1 f4       	brne	.+60     	; 0x2150 <__vector_7+0x1da>
    2114:	80 91 6d 00 	lds	r24, 0x006D
    2118:	85 30       	cpi	r24, 0x05	; 5
    211a:	d1 f4       	brne	.+52     	; 0x2150 <__vector_7+0x1da>
		{
			DECREMENT_TIME(least_hour, most_hour, 9, 9);
    211c:	80 91 6a 00 	lds	r24, 0x006A
    2120:	88 23       	and	r24, r24
    2122:	89 f4       	brne	.+34     	; 0x2146 <__vector_7+0x1d0>
    2124:	89 e0       	ldi	r24, 0x09	; 9
    2126:	80 93 6a 00 	sts	0x006A, r24
    212a:	80 91 69 00 	lds	r24, 0x0069
    212e:	88 23       	and	r24, r24
    2130:	21 f4       	brne	.+8      	; 0x213a <__vector_7+0x1c4>
    2132:	89 e0       	ldi	r24, 0x09	; 9
    2134:	80 93 69 00 	sts	0x0069, r24
    2138:	0b c0       	rjmp	.+22     	; 0x2150 <__vector_7+0x1da>
    213a:	80 91 69 00 	lds	r24, 0x0069
    213e:	81 50       	subi	r24, 0x01	; 1
    2140:	80 93 69 00 	sts	0x0069, r24
    2144:	05 c0       	rjmp	.+10     	; 0x2150 <__vector_7+0x1da>
    2146:	80 91 6a 00 	lds	r24, 0x006A
    214a:	81 50       	subi	r24, 0x01	; 1
    214c:	80 93 6a 00 	sts	0x006A, r24
		}
        // Special case when timer reach 00:00:00
		if (least_sec == 0 && most_sec == 0 && least_min == 0 && most_min == 0 && least_hour == 0 && most_hour == 0)
    2150:	80 91 6e 00 	lds	r24, 0x006E
    2154:	88 23       	and	r24, r24
    2156:	09 f5       	brne	.+66     	; 0x219a <__vector_7+0x224>
    2158:	80 91 6d 00 	lds	r24, 0x006D
    215c:	88 23       	and	r24, r24
    215e:	e9 f4       	brne	.+58     	; 0x219a <__vector_7+0x224>
    2160:	80 91 6c 00 	lds	r24, 0x006C
    2164:	88 23       	and	r24, r24
    2166:	c9 f4       	brne	.+50     	; 0x219a <__vector_7+0x224>
    2168:	80 91 6b 00 	lds	r24, 0x006B
    216c:	88 23       	and	r24, r24
    216e:	a9 f4       	brne	.+42     	; 0x219a <__vector_7+0x224>
    2170:	80 91 6a 00 	lds	r24, 0x006A
    2174:	88 23       	and	r24, r24
    2176:	89 f4       	brne	.+34     	; 0x219a <__vector_7+0x224>
    2178:	80 91 69 00 	lds	r24, 0x0069
    217c:	88 23       	and	r24, r24
    217e:	69 f4       	brne	.+26     	; 0x219a <__vector_7+0x224>
		{
			TCCR1B &= 0x00;     // Stop time
    2180:	ee e4       	ldi	r30, 0x4E	; 78
    2182:	f0 e0       	ldi	r31, 0x00	; 0
    2184:	80 81       	ld	r24, Z
    2186:	ee e4       	ldi	r30, 0x4E	; 78
    2188:	f0 e0       	ldi	r31, 0x00	; 0
    218a:	10 82       	st	Z, r1
			PORTD |= (1 << 0);  // Turn on buzzer (alarm)
    218c:	a2 e3       	ldi	r26, 0x32	; 50
    218e:	b0 e0       	ldi	r27, 0x00	; 0
    2190:	e2 e3       	ldi	r30, 0x32	; 50
    2192:	f0 e0       	ldi	r31, 0x00	; 0
    2194:	80 81       	ld	r24, Z
    2196:	81 60       	ori	r24, 0x01	; 1
    2198:	8c 93       	st	X, r24
		}
	}

	/* Update 7-segment displays */
	display(least_sec, most_sec, least_min, most_min, least_hour, most_hour);
    219a:	80 91 6e 00 	lds	r24, 0x006E
    219e:	90 91 6d 00 	lds	r25, 0x006D
    21a2:	20 91 6c 00 	lds	r18, 0x006C
    21a6:	30 91 6b 00 	lds	r19, 0x006B
    21aa:	50 91 6a 00 	lds	r21, 0x006A
    21ae:	70 91 69 00 	lds	r23, 0x0069
    21b2:	69 2f       	mov	r22, r25
    21b4:	42 2f       	mov	r20, r18
    21b6:	23 2f       	mov	r18, r19
    21b8:	05 2f       	mov	r16, r21
    21ba:	e7 2e       	mov	r14, r23
    21bc:	0e 94 5f 06 	call	0xcbe	; 0xcbe <display>
}
    21c0:	0f 90       	pop	r0
    21c2:	cf 91       	pop	r28
    21c4:	df 91       	pop	r29
    21c6:	ff 91       	pop	r31
    21c8:	ef 91       	pop	r30
    21ca:	bf 91       	pop	r27
    21cc:	af 91       	pop	r26
    21ce:	9f 91       	pop	r25
    21d0:	8f 91       	pop	r24
    21d2:	7f 91       	pop	r23
    21d4:	6f 91       	pop	r22
    21d6:	5f 91       	pop	r21
    21d8:	4f 91       	pop	r20
    21da:	3f 91       	pop	r19
    21dc:	2f 91       	pop	r18
    21de:	0f 91       	pop	r16
    21e0:	ef 90       	pop	r14
    21e2:	0f 90       	pop	r0
    21e4:	0f be       	out	0x3f, r0	; 63
    21e6:	0f 90       	pop	r0
    21e8:	1f 90       	pop	r1
    21ea:	18 95       	reti

000021ec <main>:

int main(void)
{
    21ec:	ef 92       	push	r14
    21ee:	0f 93       	push	r16
    21f0:	df 93       	push	r29
    21f2:	cf 93       	push	r28
    21f4:	cd b7       	in	r28, 0x3d	; 61
    21f6:	de b7       	in	r29, 0x3e	; 62
    21f8:	2e 97       	sbiw	r28, 0x0e	; 14
    21fa:	0f b6       	in	r0, 0x3f	; 63
    21fc:	f8 94       	cli
    21fe:	de bf       	out	0x3e, r29	; 62
    2200:	0f be       	out	0x3f, r0	; 63
    2202:	cd bf       	out	0x3d, r28	; 61
	SREG |= (1<<7);           // Global interrupt enable I-BIT
    2204:	af e5       	ldi	r26, 0x5F	; 95
    2206:	b0 e0       	ldi	r27, 0x00	; 0
    2208:	ef e5       	ldi	r30, 0x5F	; 95
    220a:	f0 e0       	ldi	r31, 0x00	; 0
    220c:	80 81       	ld	r24, Z
    220e:	80 68       	ori	r24, 0x80	; 128
    2210:	8c 93       	st	X, r24
	PORTD |= (1<<4);          // Turn on the red LED (default mode)
    2212:	a2 e3       	ldi	r26, 0x32	; 50
    2214:	b0 e0       	ldi	r27, 0x00	; 0
    2216:	e2 e3       	ldi	r30, 0x32	; 50
    2218:	f0 e0       	ldi	r31, 0x00	; 0
    221a:	80 81       	ld	r24, Z
    221c:	80 61       	ori	r24, 0x10	; 16
    221e:	8c 93       	st	X, r24
	PORTD &=~ (1<<5);         // Turn off the yellow LED
    2220:	a2 e3       	ldi	r26, 0x32	; 50
    2222:	b0 e0       	ldi	r27, 0x00	; 0
    2224:	e2 e3       	ldi	r30, 0x32	; 50
    2226:	f0 e0       	ldi	r31, 0x00	; 0
    2228:	80 81       	ld	r24, Z
    222a:	8f 7d       	andi	r24, 0xDF	; 223
    222c:	8c 93       	st	X, r24
	IO_Ports_configuration();
    222e:	0e 94 a3 05 	call	0xb46	; 0xb46 <IO_Ports_configuration>
	Timer1_configuration();
    2232:	0e 94 f9 05 	call	0xbf2	; 0xbf2 <Timer1_configuration>
	INT0_configuration();
    2236:	0e 94 20 06 	call	0xc40	; 0xc40 <INT0_configuration>
	INT1_configuration();
    223a:	0e 94 35 06 	call	0xc6a	; 0xc6a <INT1_configuration>
	INT2_configurtion();
    223e:	0e 94 4a 06 	call	0xc94	; 0xc94 <INT2_configurtion>
	while(1)
	{
		if(!(PINB & (1<<7)))
    2242:	e6 e3       	ldi	r30, 0x36	; 54
    2244:	f0 e0       	ldi	r31, 0x00	; 0
    2246:	80 81       	ld	r24, Z
    2248:	88 23       	and	r24, r24
    224a:	0c f4       	brge	.+2      	; 0x224e <main+0x62>
    224c:	95 c0       	rjmp	.+298    	; 0x2378 <main+0x18c>
    224e:	80 e0       	ldi	r24, 0x00	; 0
    2250:	90 e0       	ldi	r25, 0x00	; 0
    2252:	a0 ef       	ldi	r26, 0xF0	; 240
    2254:	b1 e4       	ldi	r27, 0x41	; 65
    2256:	8b 87       	std	Y+11, r24	; 0x0b
    2258:	9c 87       	std	Y+12, r25	; 0x0c
    225a:	ad 87       	std	Y+13, r26	; 0x0d
    225c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    225e:	6b 85       	ldd	r22, Y+11	; 0x0b
    2260:	7c 85       	ldd	r23, Y+12	; 0x0c
    2262:	8d 85       	ldd	r24, Y+13	; 0x0d
    2264:	9e 85       	ldd	r25, Y+14	; 0x0e
    2266:	20 e0       	ldi	r18, 0x00	; 0
    2268:	30 e0       	ldi	r19, 0x00	; 0
    226a:	4a e7       	ldi	r20, 0x7A	; 122
    226c:	55 e4       	ldi	r21, 0x45	; 69
    226e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2272:	dc 01       	movw	r26, r24
    2274:	cb 01       	movw	r24, r22
    2276:	8f 83       	std	Y+7, r24	; 0x07
    2278:	98 87       	std	Y+8, r25	; 0x08
    227a:	a9 87       	std	Y+9, r26	; 0x09
    227c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    227e:	6f 81       	ldd	r22, Y+7	; 0x07
    2280:	78 85       	ldd	r23, Y+8	; 0x08
    2282:	89 85       	ldd	r24, Y+9	; 0x09
    2284:	9a 85       	ldd	r25, Y+10	; 0x0a
    2286:	20 e0       	ldi	r18, 0x00	; 0
    2288:	30 e0       	ldi	r19, 0x00	; 0
    228a:	40 e8       	ldi	r20, 0x80	; 128
    228c:	5f e3       	ldi	r21, 0x3F	; 63
    228e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2292:	88 23       	and	r24, r24
    2294:	2c f4       	brge	.+10     	; 0x22a0 <main+0xb4>
		__ticks = 1;
    2296:	81 e0       	ldi	r24, 0x01	; 1
    2298:	90 e0       	ldi	r25, 0x00	; 0
    229a:	9e 83       	std	Y+6, r25	; 0x06
    229c:	8d 83       	std	Y+5, r24	; 0x05
    229e:	3f c0       	rjmp	.+126    	; 0x231e <main+0x132>
	else if (__tmp > 65535)
    22a0:	6f 81       	ldd	r22, Y+7	; 0x07
    22a2:	78 85       	ldd	r23, Y+8	; 0x08
    22a4:	89 85       	ldd	r24, Y+9	; 0x09
    22a6:	9a 85       	ldd	r25, Y+10	; 0x0a
    22a8:	20 e0       	ldi	r18, 0x00	; 0
    22aa:	3f ef       	ldi	r19, 0xFF	; 255
    22ac:	4f e7       	ldi	r20, 0x7F	; 127
    22ae:	57 e4       	ldi	r21, 0x47	; 71
    22b0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    22b4:	18 16       	cp	r1, r24
    22b6:	4c f5       	brge	.+82     	; 0x230a <main+0x11e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    22b8:	6b 85       	ldd	r22, Y+11	; 0x0b
    22ba:	7c 85       	ldd	r23, Y+12	; 0x0c
    22bc:	8d 85       	ldd	r24, Y+13	; 0x0d
    22be:	9e 85       	ldd	r25, Y+14	; 0x0e
    22c0:	20 e0       	ldi	r18, 0x00	; 0
    22c2:	30 e0       	ldi	r19, 0x00	; 0
    22c4:	40 e2       	ldi	r20, 0x20	; 32
    22c6:	51 e4       	ldi	r21, 0x41	; 65
    22c8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    22cc:	dc 01       	movw	r26, r24
    22ce:	cb 01       	movw	r24, r22
    22d0:	bc 01       	movw	r22, r24
    22d2:	cd 01       	movw	r24, r26
    22d4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    22d8:	dc 01       	movw	r26, r24
    22da:	cb 01       	movw	r24, r22
    22dc:	9e 83       	std	Y+6, r25	; 0x06
    22de:	8d 83       	std	Y+5, r24	; 0x05
    22e0:	0f c0       	rjmp	.+30     	; 0x2300 <main+0x114>
    22e2:	80 e9       	ldi	r24, 0x90	; 144
    22e4:	91 e0       	ldi	r25, 0x01	; 1
    22e6:	9c 83       	std	Y+4, r25	; 0x04
    22e8:	8b 83       	std	Y+3, r24	; 0x03
    22ea:	8b 81       	ldd	r24, Y+3	; 0x03
    22ec:	9c 81       	ldd	r25, Y+4	; 0x04
    22ee:	01 97       	sbiw	r24, 0x01	; 1
    22f0:	f1 f7       	brne	.-4      	; 0x22ee <main+0x102>
    22f2:	9c 83       	std	Y+4, r25	; 0x04
    22f4:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    22f6:	8d 81       	ldd	r24, Y+5	; 0x05
    22f8:	9e 81       	ldd	r25, Y+6	; 0x06
    22fa:	01 97       	sbiw	r24, 0x01	; 1
    22fc:	9e 83       	std	Y+6, r25	; 0x06
    22fe:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2300:	8d 81       	ldd	r24, Y+5	; 0x05
    2302:	9e 81       	ldd	r25, Y+6	; 0x06
    2304:	00 97       	sbiw	r24, 0x00	; 0
    2306:	69 f7       	brne	.-38     	; 0x22e2 <main+0xf6>
    2308:	14 c0       	rjmp	.+40     	; 0x2332 <main+0x146>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    230a:	6f 81       	ldd	r22, Y+7	; 0x07
    230c:	78 85       	ldd	r23, Y+8	; 0x08
    230e:	89 85       	ldd	r24, Y+9	; 0x09
    2310:	9a 85       	ldd	r25, Y+10	; 0x0a
    2312:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2316:	dc 01       	movw	r26, r24
    2318:	cb 01       	movw	r24, r22
    231a:	9e 83       	std	Y+6, r25	; 0x06
    231c:	8d 83       	std	Y+5, r24	; 0x05
    231e:	8d 81       	ldd	r24, Y+5	; 0x05
    2320:	9e 81       	ldd	r25, Y+6	; 0x06
    2322:	9a 83       	std	Y+2, r25	; 0x02
    2324:	89 83       	std	Y+1, r24	; 0x01
    2326:	89 81       	ldd	r24, Y+1	; 0x01
    2328:	9a 81       	ldd	r25, Y+2	; 0x02
    232a:	01 97       	sbiw	r24, 0x01	; 1
    232c:	f1 f7       	brne	.-4      	; 0x232a <main+0x13e>
    232e:	9a 83       	std	Y+2, r25	; 0x02
    2330:	89 83       	std	Y+1, r24	; 0x01
		{
			_delay_ms(30);     /* To avoid de-bounce issue */
			if(!(PINB & (1<<7)))
    2332:	e6 e3       	ldi	r30, 0x36	; 54
    2334:	f0 e0       	ldi	r31, 0x00	; 0
    2336:	80 81       	ld	r24, Z
    2338:	88 23       	and	r24, r24
    233a:	04 f1       	brlt	.+64     	; 0x237c <main+0x190>
			{
				if(checkFlag == 0)
    233c:	80 91 75 00 	lds	r24, 0x0075
    2340:	88 23       	and	r24, r24
    2342:	e1 f4       	brne	.+56     	; 0x237c <main+0x190>
				{
				modeFlag ^=(1<<0);    // Toggle flag of mode
    2344:	90 91 68 00 	lds	r25, 0x0068
    2348:	81 e0       	ldi	r24, 0x01	; 1
    234a:	89 27       	eor	r24, r25
    234c:	80 93 68 00 	sts	0x0068, r24
				PORTD ^= (1<<4);      // Turn on, off the red LED
    2350:	a2 e3       	ldi	r26, 0x32	; 50
    2352:	b0 e0       	ldi	r27, 0x00	; 0
    2354:	e2 e3       	ldi	r30, 0x32	; 50
    2356:	f0 e0       	ldi	r31, 0x00	; 0
    2358:	90 81       	ld	r25, Z
    235a:	80 e1       	ldi	r24, 0x10	; 16
    235c:	89 27       	eor	r24, r25
    235e:	8c 93       	st	X, r24
				PORTD ^= (1<<5);      // Turn on, off the yellow LED
    2360:	a2 e3       	ldi	r26, 0x32	; 50
    2362:	b0 e0       	ldi	r27, 0x00	; 0
    2364:	e2 e3       	ldi	r30, 0x32	; 50
    2366:	f0 e0       	ldi	r31, 0x00	; 0
    2368:	90 81       	ld	r25, Z
    236a:	80 e2       	ldi	r24, 0x20	; 32
    236c:	89 27       	eor	r24, r25
    236e:	8c 93       	st	X, r24
				checkFlag = 1;
    2370:	81 e0       	ldi	r24, 0x01	; 1
    2372:	80 93 75 00 	sts	0x0075, r24
    2376:	02 c0       	rjmp	.+4      	; 0x237c <main+0x190>
				}
			}
		}
		else checkFlag = 0;
    2378:	10 92 75 00 	sts	0x0075, r1

		Adjustment();
    237c:	0e 94 b1 0a 	call	0x1562	; 0x1562 <Adjustment>

		/* Refresh 7-segment displays */
		display(least_sec, most_sec, least_min, most_min, least_hour, most_hour);
    2380:	80 91 6e 00 	lds	r24, 0x006E
    2384:	90 91 6d 00 	lds	r25, 0x006D
    2388:	20 91 6c 00 	lds	r18, 0x006C
    238c:	30 91 6b 00 	lds	r19, 0x006B
    2390:	50 91 6a 00 	lds	r21, 0x006A
    2394:	70 91 69 00 	lds	r23, 0x0069
    2398:	69 2f       	mov	r22, r25
    239a:	42 2f       	mov	r20, r18
    239c:	23 2f       	mov	r18, r19
    239e:	05 2f       	mov	r16, r21
    23a0:	e7 2e       	mov	r14, r23
    23a2:	0e 94 5f 06 	call	0xcbe	; 0xcbe <display>
    23a6:	4d cf       	rjmp	.-358    	; 0x2242 <main+0x56>

000023a8 <__prologue_saves__>:
    23a8:	2f 92       	push	r2
    23aa:	3f 92       	push	r3
    23ac:	4f 92       	push	r4
    23ae:	5f 92       	push	r5
    23b0:	6f 92       	push	r6
    23b2:	7f 92       	push	r7
    23b4:	8f 92       	push	r8
    23b6:	9f 92       	push	r9
    23b8:	af 92       	push	r10
    23ba:	bf 92       	push	r11
    23bc:	cf 92       	push	r12
    23be:	df 92       	push	r13
    23c0:	ef 92       	push	r14
    23c2:	ff 92       	push	r15
    23c4:	0f 93       	push	r16
    23c6:	1f 93       	push	r17
    23c8:	cf 93       	push	r28
    23ca:	df 93       	push	r29
    23cc:	cd b7       	in	r28, 0x3d	; 61
    23ce:	de b7       	in	r29, 0x3e	; 62
    23d0:	ca 1b       	sub	r28, r26
    23d2:	db 0b       	sbc	r29, r27
    23d4:	0f b6       	in	r0, 0x3f	; 63
    23d6:	f8 94       	cli
    23d8:	de bf       	out	0x3e, r29	; 62
    23da:	0f be       	out	0x3f, r0	; 63
    23dc:	cd bf       	out	0x3d, r28	; 61
    23de:	09 94       	ijmp

000023e0 <__epilogue_restores__>:
    23e0:	2a 88       	ldd	r2, Y+18	; 0x12
    23e2:	39 88       	ldd	r3, Y+17	; 0x11
    23e4:	48 88       	ldd	r4, Y+16	; 0x10
    23e6:	5f 84       	ldd	r5, Y+15	; 0x0f
    23e8:	6e 84       	ldd	r6, Y+14	; 0x0e
    23ea:	7d 84       	ldd	r7, Y+13	; 0x0d
    23ec:	8c 84       	ldd	r8, Y+12	; 0x0c
    23ee:	9b 84       	ldd	r9, Y+11	; 0x0b
    23f0:	aa 84       	ldd	r10, Y+10	; 0x0a
    23f2:	b9 84       	ldd	r11, Y+9	; 0x09
    23f4:	c8 84       	ldd	r12, Y+8	; 0x08
    23f6:	df 80       	ldd	r13, Y+7	; 0x07
    23f8:	ee 80       	ldd	r14, Y+6	; 0x06
    23fa:	fd 80       	ldd	r15, Y+5	; 0x05
    23fc:	0c 81       	ldd	r16, Y+4	; 0x04
    23fe:	1b 81       	ldd	r17, Y+3	; 0x03
    2400:	aa 81       	ldd	r26, Y+2	; 0x02
    2402:	b9 81       	ldd	r27, Y+1	; 0x01
    2404:	ce 0f       	add	r28, r30
    2406:	d1 1d       	adc	r29, r1
    2408:	0f b6       	in	r0, 0x3f	; 63
    240a:	f8 94       	cli
    240c:	de bf       	out	0x3e, r29	; 62
    240e:	0f be       	out	0x3f, r0	; 63
    2410:	cd bf       	out	0x3d, r28	; 61
    2412:	ed 01       	movw	r28, r26
    2414:	08 95       	ret

00002416 <_exit>:
    2416:	f8 94       	cli

00002418 <__stop_program>:
    2418:	ff cf       	rjmp	.-2      	; 0x2418 <__stop_program>
